#!/usr/bin/env perl
#
# A perl script to manipulate/explain terminals
# one of my first perl scripts, written under perl 4
# in 1994/5 and it really shows :)
#
$name = $0;
$name =~ s'.*/''; # remove path--like basename
$usage = "usage:\n$name [-help] [many other options]";
$author  = "Dr. Steven D. Parker";
$version = "2.0 (101194)";
$version = "2.1 (051595)"; # add verbose flag, and make quiet operation default
$version = "2.2 (071495)"; # planned add addition of effect array

$true=1; $false=0;
$maxflash=101;
$maxspots=20000;
$maxstars=20000;
$maxpops=1000;
$row_lim=$ENV{LINES} || 25;
$col_lim=$ENV{COLUMNS} || 81;
$verbose=0;
$debug=0;
$noclear=0;
select( (select(STDOUT), $|=1) [ $[ ] );

&ascii;
&parse_args;

exit 0;

#   ***   Parse Command Line Argument(s)   ***
sub parse_args {

# local(%abbrev)=();
  my $abbrev = {};

  @args=('?','help');
  @help=('print this message','print this message');

  push(@args,'verbose','quiet');
  push(@help,'print what action(s) is(are) being performed',
	     'do not print what action(s) is(are) being performed');
  push(@args,'icon','title','name','font','size','reset','test','es');
  push(@help,'change icon label',
             'change both icon & window label',
             'change window label',
             'change font',
	     'change size to (X,Y) unimplimented',
	     'do a full reset',
	     'terminal reporting',
	     "screen alignment test (fill screen with E's)");
  push(@args,'tek','vt100','debug','real','tekcls','star','scroll','cls');
  push(@help,'Enter Tektronix Mode',
	     'Enter VT100 Mode',
	     'Debug (print escape codes in ascii format)',
	     'real (print actual escape codes)',
             'clear screen (Tek mode)',
             'star at (X,Y)',
             'set scrolling region to (top,bottom)',
             'clear screen (VT100 mode)');
  push(@args,'80','132','jump','smooth','alternate_buffer','normal_buffer',
	     'reverse_video','normal_video');
  push(@help,'switch to 80 columns',
	     'switch to 132 columns',
	     'switch to jump (fast) scroll',
	     'switch to smooth (slow) scroll',
             'Use Alternate Screen Buffer',
             'Use Normal Screen Buffer',
             'Use Reverse Video',
             'Use Normal Video');
  push(@args,'stars','sparkle','circle','pops','flash');
  push(@help,"put random X [$maxspots] stars to the screen",
	     "put X [$maxspots] different things to the screen",
	     "put X [$maxspots] different things into a circle on the screen",
	     "put X animated 'pops' on the screen",
	     "flash the screen n times [$maxflash] m second delay [0]");
  push(@args,'noclear');
  push(@help,"Do not clear the screen first when doing star, stars or sparkle");

  grep(s/^([^-])/-\1/,@args);

# use lib("/Users/Steve/etc/perllib");
# require("abbrev2.pl");
  use Text::Abbrev;
  abbrev($abbrev, @args);


  while ( @ARGV >= 1 ) {
    if      ( ($abbrev->{$ARGV[0]} eq '-help' )
           || ($abbrev->{$ARGV[0]} eq '-?' ) ) {
      help($usage);
      print "$abbrev->{$ARGV[0]} $abbrev->{$ARGV[0]}'\n" if ($verbose);
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-icon' ) {
      print "changing icon lable to '$ARGV[1]'\n" if ($verbose);
      print "${ESC}]1;$ARGV[1]${BEL}";
      shift(@ARGV); shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-noclear' ) {
      print "will not clear first\n" if ($verbose);
      $noclear=1;
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-title' ) {
      print "changing both icon & window lables to '$ARGV[1]'\n" if ($verbose);
      print "${ESC}]0;$ARGV[1]${BEL}";
      shift(@ARGV); shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-name' ) {
      print "changing window lable to '$ARGV[1]'\n" if ($verbose);
      print "${ESC}]2;$ARGV[1]${BEL}";
      shift(@ARGV); shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-font' ) {
      print "changing font to '$ARGV[1]'\n" if ($verbose);
      print "${ESC}]50;$ARGV[1]${BEL}";
      shift(@ARGV); shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-reset' ) {
      print "Doing a full reset:\n" if ($verbose);
      sleep 1;
      print "${ESC}c";
#     print "${ESC}c";
#     following line from the termcap entry
#     print "[r[m[2J[H[?7h[?1;3;4;6l[4l<";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-size' ) {
      print "Changing screen size (currently unimplimented):\n" if ($verbose);
#     print "${ESC}#8";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-es' ) {
      print "Doing a screen alignment test:\n" if ($verbose);
      print "${ESC}#8";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-test' ) {
      print "Please Send Device Attributes (DA)\n" if ($verbose);
#     print "${ESC}[?1;2c";
      print "${ESC}[c\n";
      print "\nESC [ ? 1 ; 2 c means " if ($verbose);
      print "``I am a VT100 with Advanced Video Option.''\n" if ($verbose);
      print "Requesting Terminal Parameters (DECREQTPARM).\n" if ($verbose);
      print "${ESC}[0x";
      print "\n";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-tek' ) {
      print "Switching to Tektronics mode.\n" if ($verbose);
      print "${ESC}[?38h";
      $ENV{'TERM'}='tek';
      print 'setenv TERM tek\n';
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-teksave' ) {
      print "Saving Tektronics screen to COPYyy-mm-dd.hh:mm:ss.\n" if ($verbose);
      print "${ESC}${ETB}";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-vt100' ) {
      print "Switching to vt100 mode.\n" if ($verbose);
      print "${ESC}$control{'c'}";
      print 'setenv TERM xterm\n';
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-real' ) {
      print "Entering normal operational mode " if ($verbose);
      print "(ie. actual escape sequences will be used)\n";
      &ascii; $debug="";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-debug' ) {
      print "Entering debug mode (ie. escape is '\\E' etc.)\n";
      &ascii_visible_code;
#     &ascii_visible_control;
#     &ascii_visible_abbrev;
      $debug="\n";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-quiet' ) {
      $verbose=0;
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-verbose' ) {
      $verbose++;
      print "verbosity is now at $verbose\n";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-cls' ) {
      print "Clearing Screen.\n" if ($verbose);
      print "${ESC}[H${ESC}[2J";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-tekcls' ) {
      print "Clearing Screen.\n" if ($verbose);
      print "${ESC}$linefeed";
      print "$formfeed";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-80' ) {
      print "switching to 80 columns\n" if ($verbose);
      print "${ESC}[?40h${ESC}[?3l";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-132' ) {
      print "switching to 132 columns\n" if ($verbose);
      print "${ESC}[?40h${ESC}[?3h";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-jump' ) {
      print "switching to jump (fast) scrolling\n" if ($verbose);
      print "${ESC}[?4l";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-smooth' ) {
      print "switching to smooth (slow) scrolling\n" if ($verbose);
      print "${ESC}[?4h";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-normal_buffer' ) {
      print "Using normal screen buffer\n" if ($verbose);
      print "${ESC}[?47l";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-alternate_buffer' ) {
      print "Using alternate screen buffer\n" if ($verbose);
      print "${ESC}[?47h";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-reverse_video' ) {
      print "Using Reverse Video\n" if ($verbose);
      print "${ESC}[?5h";
      shift(@ARGV); next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-normal_video' ) {
      print "Using Normal Video\n" if ($verbose);
      print "${ESC}[?5l";
      shift(@ARGV); next;


    } elsif ( $abbrev->{$ARGV[0]} eq '-star' ) {
      local($x,$y,$star)=(0,0,'*');
      shift(@ARGV);
      if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) && ( $ARGV[0] <= 131 ) ) {
	$x=$ARGV[0];
        shift(@ARGV);
      }
      if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) && ( $ARGV[0] <= 23 ) ) {
	$y=$ARGV[0];
        shift(@ARGV);
      }
      if ( ($ARGV[0] =~ /^.$/ ) ) {
	$star=$ARGV[0];
        shift(@ARGV);
      }
      print "${ESC}7${ESC}[${x};${y}H${star}${ESC}8";
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-pops' ) {
      local($x,$y)=(0,0);
      local($pops_out);
      local(@pop)=(".","o","0","*"," ");
      shift(@ARGV);
      print "will put" if ($verbose);
      if ( $ARGV[0] !~ /^-/ ) {
        if ( ( $ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
          $pops=$ARGV[0];
          shift(@ARGV);
          print " $pops 'pops' on screen" if ($verbose);
        } else {
	  print " $maxpops 'pops' on screen" if ($verbose);
        }
      }
      print "${ESC}[H${ESC}[2J" if (! $noclear); # clear home
      print "\n" if ($verbose);
      while (1) {
	$pops_out++;
	last if ( ($pops    && ($pops_out >  $pops) )
               || ($maxpops && ($pops_out >= $maxpops ) ) );
        ($x,$y)=( int(rand($row_lim)), int(rand($col_lim))  );
        foreach $pop (@pop) {
          print "${ESC}7${ESC}[${x};${y}H${pop}${ESC}8";
	  select(undef,undef,undef,0.1);
	}
      }
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-stars' ) {
      local($x,$y,$star,$space)=(0,0,'*',' ');
      local($stars_out);
      shift(@ARGV);
      print "will put" if ($verbose);
      if ( $ARGV[0] !~ /^-/ ) {
        if ( ( $ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
          $stars=$ARGV[0];
          shift(@ARGV);
          print " $stars 'stars' on screen" if ($verbose);
        } else {
	  print " $maxstars 'stars' on screen" if ($verbose);
        }
      }
      print "${ESC}[H${ESC}[2J" if (! $noclear); # clear home
      print "\n" if ($verbose);
      while (1) {
	$stars_out++;
	last if ( ($stars    && ($stars_out >  $stars) )
               || ($maxstars && ($stars_out >= $maxstars ) ) );
        ($x,$y)=( int(rand($row_lim)), int(rand($col_lim))  );
	if (!$star_there[$x,$y]) {
	  $star_there[$x,$y]++;
          print "${ESC}7${ESC}[${x};${y}H${star}${ESC}8";
	} else {
          print "${ESC}7${ESC}[${x};${y}H${space}${ESC}8";
	  $star_there[$x,$y]=0;
	}
      }
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-circle' ) {
      local($x,$y)=(0,0);
      local($things)='-=+o0O*%#%#@#@';
      local($center_x,$center_y,$radius2,$ratio) = (15,35,100,0.4);
      local($spots_out);
      shift(@ARGV);
      srand(time|$$);
      print "will put" if ($verbose);
      if ( $ARGV[0] !~ /^-/ ) {
        if ( ( $ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
          $spots=$ARGV[0];
          shift(@ARGV);
          print " $spots 'things' on screen" if ($verbose);
        } else {
	  print " $maxspots 'things on screen" if ($verbose);
	  # must be a list 
          $things=$ARGV[0];
          shift(@ARGV);
	  print " from this string '$things'" if ($verbose);
        }
      }
      local(@things)=split(//,$things);
      print "${ESC}[H${ESC}[2J" if (! $noclear); # clear home
      print "\n" if ($verbose);
      next if ($debug);
      while (1) {
	last if ( ($spots    && ($spots_out >  $spots) )
               || ($maxspots && ($spots_out >= $maxspots ) ) );
        ($x,$y,$thing)=( int(rand($row_lim)), int(rand($col_lim)), int(rand(@things))  );
	next if ( (($x-$center_x)**2+$ratio*($y-$center_y)**2) >= $radius2 ); 
        print "${ESC}7${ESC}[${x};${y}H$things[$thing]${ESC}8";
	$spots_out++;
      }
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-sparkle' ) {
      local($x,$y)=(0,0);
#     local($things)=' .,;:`' . "\'";
#     local($things)='|() ';
#     local($things)='\/| ';
#     local($things)='-_=~ ';
      local($things)=' ., +o0 O*@ #';
      local($spots_out);
      shift(@ARGV);
srand(time|$$);
      print "will put" if ($verbose);
      if ( $ARGV[0] and $ARGV[0] !~ /^-/ ) {
        if ( ( $ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
          $spots=$ARGV[0];
          shift(@ARGV);
          print " $spots 'things' on screen" if ($verbose);
        } else {
	  print " $maxspots 'things on screen" if ($verbose);
	  # must be a list 
          $things=$ARGV[0];
          shift(@ARGV);
	  print " from this string '$things'" if ($verbose);
        }
      }
      local(@things)=split(//,$things);
      print "${ESC}[H${ESC}[2J" if (! $noclear); # clear home
      print "\n" if ($verbose);
      next if ($debug);
      while (1) {
	$spots_out++;
	last if ( ($spots    && ($spots_out >  $spots) )
               || ($maxspots && ($spots_out >= $maxspots ) ) );
        ($x,$y,$thing)=( int(rand($row_lim)), int(rand($col_lim)), int(rand(@things))  );
        print "${ESC}7${ESC}[${x};${y}H$things[$thing]${ESC}8";
      }
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-flash' ) {
#     print "${ESC}[H${ESC}[2J" if (! $noclear); # clear home
      local($on_off,$loops,$delay)=(0,0,0);
      shift(@ARGV);
      print "will flash" if ($verbose);
      if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
        $loops=$ARGV[0];
        shift(@ARGV);
        print " $loops times" if ($verbose);
        if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) ) {
	  $delay=$ARGV[0];
          shift(@ARGV);
          print " with a '$delay' second delay." if ($verbose);
        } else {
          print " as fast as possible." if ($verbose);
	}
      } else {
	if ($verbose) {
	  if ($maxflash) {
            print " $maxflash times, as fast as possible."
	  } else {
            print " continuously, as fast as possible."
	  }
	}
      }
      print "\n" if ($verbose);
      while (1) {
        $on_off++;
	last if ( ($loops    && ($on_off >  $loops) )
               || ($maxflash && ($on_off >= $maxflash ) ) );
	sleep $delay if ($delay);
	if ($on_off%2) {
	  print "${ESC}[?5h";
	} else {
	  print "${ESC}[?5l";
	}
      }
      next;

    } elsif ( $abbrev->{$ARGV[0]} eq '-scroll' ) {
      local($top,$bottom)=(0,24);
      shift(@ARGV);
      if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] >= 0 ) && ( $ARGV[0] <= 24 ) ) {
	$top=$ARGV[0];
        shift(@ARGV);
      }
      if ( ($ARGV[0] =~ /\d+/ ) && ( $ARGV[0] > $top ) && ( $ARGV[0] <= 24 ) ) {
	$bottom=$ARGV[0];
        shift(@ARGV);
      }
      print "Setting scrolling region to ($top,$bottom).\n";
      print "${ESC}[${top};${bottom}r";
      next;

    } elsif ( $abbrev->{$ARGV[0]} !~ /^-/ ) {
      warn("$name: Unknown option '$ARGV[0]'; assuming title...\n");
      unshift(@ARGV,'-title'); next;
    } else {
      warn("$name: Unknown option '$ARGV[0]'; disregarding...\n");
      shift(@ARGV); next;
    }
#   print "$debug";
  }  # end while
}  # end parse_args

sub help {
  select(STDOUT); $|=1; $\=''; 
  print "@_[0]\n";
  if (@help) {
    for ($arg=$[; $arg<=$#args; $arg++) {
      printf "%-16s\t%s\n", $args[$arg], $help[$arg];
    }
  } else {
    for ($arg=$[; $arg<=$#args; $arg++) {
      print "$args[$arg]\t";
    }
    print "\n";
  }
  exit 1;
}

sub ascii {
  $null= $NUL=		"\000";
  $control{'a'}=	"\001";
  $control{'b'}=	"\002";
  $control{'c'}=	"\003";
  $control{'d'}=	"\004";
  $control{'e'}=	"\005";
  $control{'f'}=	"\006";
  $control{'p'}=	"\020";
  $control{'q'}=	"\021";
  $control{'r'}=	"\022";
  $control{'s'}=	"\023";
  $control{'t'}=	"\024";
  $control{'u'}=	"\025";
  $control{'v'}=	"\026";
  $control{'w'}= $ETB=	"\027";
  $control{'x'}=	"\030";
  $control{'y'}=	"\031";
  $control{'z'}=	"\032";
  $control{'g'}= $bell= $BEL=		"\007"; # $bell = $alarm =	"\a";
  $control{'h'}= $backspace=		"\010"; # $backspace=		"\b";
  $control{'i'}= $horizontal_tab= $tab= "\011"; # $tab=			"\t";
  $control{'j'}= $linefeed= $newline=	"\012"; # $newline=		"\n";
  $control{'k'}= $vertical_tab= 	"\013";
  $control{'l'}= $newpage= $formfeed=	"\014"; # $formfeed=		"\f"
  $control{'m'}= $return= $CR=	 	"\015"; # $return=		"\r"
  $control{'n'}= $shift_out= $SO=	"\016";
  $control{'o'}= $shift_in=  $SI=	"\017";
  $escape= $ESC=	"\033";		        # $escape=		"\e"
  $backslash=		"\\";
  $delete= $DEL=	"\0177";
#         \033      octal char
#         \x1b      hex char
#         \c[       control char
#         \l        lowercase next char
#         \u        uppercase next char
#         \L        lowercase till \E
#         \U        uppercase till \E
#         \E        end case modification
}

sub ascii_visible_abbrev {
  $null= $NUL=		"NUL";
  $control{'a'}=	"SOH";
  $control{'b'}=	"STX";
  $control{'c'}=	"ETX";
  $control{'d'}=	"EOT";
  $control{'e'}=	"ENQ";
  $control{'f'}=	"ACK";
  $control{'g'}= $bell= $BEL=		"BEL";
  $control{'h'}= $backspace=		"BS";
  $control{'i'}= $horizontal_tab= $tab= "HT";
  $control{'j'}= $linefeed= $newline=	"NL";
  $control{'k'}= $vertical_tab= 	"VT";
  $control{'l'}= $newpage= $formfeed=	"NP";
  $control{'m'}= $return= $CR=	 	"CR";
  $control{'n'}= $shift_out= $SO=	"SO";
  $control{'o'}= $shift_in=  $SI=	"SI";
  $control{'p'}=	"DLE";
  $control{'q'}=	"DC1";
  $control{'r'}=	"DC2";
  $control{'s'}=	"DC3";
  $control{'t'}=	"DC4";
  $control{'u'}=	"NAK";
  $control{'v'}=	"SYN";
  $control{'w'}=	"ETB";
  $control{'x'}=	"CAN";
  $control{'y'}=	"EM";
  $control{'z'}=	"SUB";
  $escape= $ESC=	"ESC";
  $backslash=		"\\";
  $delete= $DEL=	"^?";
}

sub ascii_visible_control {
  $null= $NUL=		'^@';
  $control{'a'}=	'^A';
  $control{'b'}=	'^B';
  $control{'c'}=	'^C';
  $control{'d'}=	'^D';
  $control{'e'}=	'^E';
  $control{'f'}=	'^F';
  $control{'g'}= $bell= $BEL=		'^G';
  $control{'h'}= $backspace=		'^H';
  $control{'i'}= $horizontal_tab= $tab= '^I';
  $control{'j'}= $linefeed= $newline=	'^J';
  $control{'k'}= $vertical_tab= 	'^K';
  $control{'l'}= $newpage= $formfeed=	'^L';
  $control{'m'}= $return= $CR=	 	'^M';
  $control{'n'}= $shift_out= $SO=	'^N';
  $control{'o'}= $shift_in=  $SI=	'^O';
  $control{'p'}=	'^P';
  $control{'q'}=	'^Q';
  $control{'r'}=	'^R';
  $control{'s'}=	'^S';
  $control{'t'}=	'^T';
  $control{'u'}=	'^U';
  $control{'v'}=	'^V';
  $control{'w'}=	'^W';
  $control{'x'}=	'^X';
  $control{'y'}=	'^Y';
  $control{'z'}=	'^Z';
  $escape= $ESC=	'^[';
  $backslash=		'\\';
  $delete= $DEL=	'^?';
}

sub ascii_visible_code {
  &ascii_visible_control;

  $null= $NUL=		'\0';
  $control{'h'}= $backspace=		'\B';
  $control{'i'}= $horizontal_tab= $tab= '\T';
  $control{'j'}= $linefeed= $newline=	'\N';
  $control{'l'}= $newpage= $formfeed=	'\F';
  $control{'m'}= $return= $CR=	 	'\R';
  $control{'p'}=	'^P';
  $control{'q'}=	'^Q';
  $control{'r'}=	'^R';
  $control{'s'}=	'^S';
  $control{'t'}=	'^T';
  $control{'u'}=	'^U';
  $control{'v'}=	'^V';
  $control{'w'}=	'^W';
  $control{'x'}=	'^X';
  $control{'y'}=	'^Y';
  $control{'z'}=	'^Z';
  $escape= $ESC=	'\E';
  $backslash=		'\\';
  $delete= $DEL=	'^?';
}


__END__

================================ termcap entry =================================

Attempting to find xterm in /usr/share/lib/termcap.
xterm|vs100|xterm terminal emulator (X Window System):
AL=\E[%dL      str    (NP*)   add n new blank lines
DC=\E[%dP      str    (NP*)   delete n characters
DL=\E[%dM      str    (NP*)   delete n lines
DO=\E[%dB      str    (NP*)   move cursor down n lines
IC=\E[%d@      str    (NP*)   insert n blank characters
UP=\E[%dA      str    (NP*)   move cursor up n lines
al=\E[L        str    (P*)    add new blank line
am             bool           terminal has automatic margins
bs             bool    (o)    terminal can backspace with ^H
cd=\E[J        str    (P*)    clear to end of display
ce=\E[K        str     (P)    clear to end of line
cl=\E[H\E[2J   str    (P*)    clear screen and home cursor
cm=\E[%i%d;%dH str    (NP)    screen-relative cursor motion to row m, column n
co#80          num            number of columns in a line
cs=\E[%i%d;%dr str    (NP)    change scrolling region to lines m through n (VT100)
ct=\E[3k       str     (P)    clear all tab stops
dc=\E[P        str    (P*)    delete character
dl=\E[M        str    (P*)    delete line
ei=\E[4l       str            end insert mode
ho=\E[H        str     (P)    home cursor
im=\E[4h       str            enter insert mode
is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;3;4;6l\E[4l
               str            terminal initialization string
k1=\EOP        str            sent by function keys 0-9
k2=\EOQ        str            sent by function keys 0-9
k3=\EOR        str            sent by function keys 0-9
k4=\EOS        str            sent by function keys 0-9
kb=^H          str            sent by backspace key
kd=\EOB        str            sent by down-arrow key
ke=\E[?1l\E>   str            out of "keypad transmit" mode
kl=\EOD        str            sent by left-arrow key
km             bool           has a "meta" key (shift, sets parity bit)
kn#4           num     (o)    number of function (k0-k9) keys (default 0)
kr=\EOC        str            sent by right-arrow key
ks=\E[?1h\E=   str            put terminal in "keypad transmit" mode
ku=\EOA        str            sent by up-arrow key
li#65          num            number of lines on screen or page
md=\E[1m       str            turn on bold (extra bright) attribute
me=\E[m        str            turn off all attributes
mi             bool           safe to move while in insert mode
mr=\E[7m       str            turn on reverse-video attribute
ms             bool           safe to move in standout modes
nd=\E[C        str            non-destructive space (cursor right)
pt             bool    (o)    has hardware tab stops (may need to be set with is)
rc=\E8         str     (P)    restore cursor to position of last sc
rs=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;3;4;6l\E[4l\E<
               str            reset terminal completely to sane modes
sc=\E7         str     (P)    save cursor position
se=\E[m        str            end standout mode
sf=\n          str     (P)    scroll text up
so=\E[7m       str            begin standout mode
sr=\EM         str     (P)    scroll text down
te=\E[2J\E[?47l\E8
               str            string to end programs that use termcap
ti=\E7\E[?47h  str            string to begin programs that use termcap
ue=\E[m        str            end underscore mode
up=\E[A        str            upline (cursor up)
us=\E[4m       str            start underscore mode
xn             bool           NEWLINE ignored after 80 cols (Concept)

=========================== from ~src/xterm/ctl.txt: ===========================
                     Xterm Control Sequences
                           Edward Moy
               University of California, Berkeley
                           Revised by
                         Stephen Gildea
                        MIT X Consortium

Definitions

 c
     The literal character c.

C    A single (required) character.

Ps   A single (usually optional) numeric parameter,  composed  of
     one of more digits.

Pm   A multiple numeric parameter composed of any number of  sin-
     gle numeric parameters, separated by  ; character(s).

Pt   A text parameter composed of printable characters.

VT100 Mode

Most of  these  control  sequences  are  standard  VT102  control
sequences,  but  there  are some sequences here from later DEC VT
terminals, too.  Major VT102 features not  supported  are  smooth
scrolling,  double size characters, blinking characters, and VT52
mode.  There are additional control sequences to  provide  xterm-
dependent  functions,  like  the scrollbar or window size.  Where
the function is specified by DEC or ISO 6429, the  code  assigned
to  it  is  given  in parentheses.  The escape codes to designate
character sets are specified by ISO 2022; see that document for a
discussion of character sets.


BEL        Bell (Ctrl-G)
BS         Backspace (Ctrl-H)

TAB        Horizontal Tab (HT) (Ctrl-I)
LF         Line Feed or New Line (NL) (Ctrl-J)

VT         Vertical Tab (Ctrl-K) same as LF
FF         Form Feed or New Page (NP) (Ctrl-L) same as LF

CR         Carriage Return (Ctrl-M)
SO         Shift Out (Ctrl-N) -> Switch to Alternate  Charac-

               ter Set: invokes the G1 character set.
SI         Shift In (Ctrl-O) -> Switch to Standard  Character

               Set: invokes the G0 character set (the default).
ESC # 8

               DEC Screen Alignment Test (DECALN)
ESC (CDesignate G0 Character Set (ISO 2022)

                 C =  0 -> DEC Special  Character  and  Line
               Drawing Set

                 C =  A -> United Kingdom (UK)
                 C =  B -> United States (USASCII)

ESC )CDesignate G1 Character Set (ISO 2022)
                 C =  0 -> DEC Special  Character  and  Line

               Drawing Set
                 C =  A -> United Kingdom (UK)

                 C =  B -> United States (USASCII)
ESC *CDesignate G2 Character Set (ISO 2022)

                 C =  0 -> DEC Special  Character  and  Line
               Drawing Set

                 C =  A -> United Kingdom (UK)
                 C =  B -> United States (USASCII)

ESC +CDesignate G3 Character Set (ISO 2022)
                 C =  0 -> DEC Special  Character  and  Line

               Drawing Set
                 C =  A -> United Kingdom (UK)

                 C =  B -> United States (USASCII)
ESC 7 Save Cursor (DECSC)

ESC 8 Restore Cursor (DECRC)
ESC = Application Keypad (DECPAM)

ESC > Normal Keypad (DECPNM)
ESC D Index (IND)

ESC E Next Line (NEL)
ESC H Tab Set (HTS)

ESC M Reverse Index (RI)
ESC N Single Shift Select of  G2  Character  Set  (SS2):

               affects next character only
ESC O Single Shift Select of  G3  Character  Set  (SS3):

               affects next character only
ESC PPtESC \

               Device Control String (DCS)
                 xterm  implements  no  DCS  functions;   Pt   is

               ignored.  Pt need not be printable characters.
ESC Z Return Terminal  ID  (DECID).   Obsolete  form  of

               ESC [ c (DA).
ESC [Ps @

               Insert Ps (Blank) Character(s) (default = 1) (ICH)
ESC [Ps A

               Cursor Up Ps Times (default = 1) (CUU)
ESC [Ps B

               Cursor Down Ps Times (default = 1) (CUD)
ESC [Ps C

               Cursor Forward Ps Times (default = 1) (CUF)
ESC [Ps D

               Cursor Backward Ps Times (default = 1) (CUB)
ESC [Ps ;Ps H

               Cursor Position  [row;column]  (default  =  [1,1])
               (CUP)

ESC [Ps J
               Erase in Display (ED)

                 Ps =  0 -> Clear Below (default)
                 Ps =  1 -> Clear Above
                 Ps =  2 -> Clear All
ESC [Ps K

               Erase in Line (EL)
                 Ps =  0 -> Clear to Right (default)
                 Ps =  1 -> Clear to Left
                 Ps =  2 -> Clear All

ESC [Ps L
               Insert Ps Line(s) (default = 1) (IL)

ESC [Ps M
               Delete Ps Line(s) (default = 1) (DL)

ESC [Ps P
               Delete Ps Character(s) (default = 1) (DCH)

ESC [Ps ;Ps ;Ps ;Ps ;Ps T
               Initiate hilite mouse  tracking.   Parameters  are
               [func;startx;starty;firstrow;lastrow].    See  the
               section Mouse Tracking.

ESC [Ps c
               Send Device Attributes (DA)

                 Ps =  0 or omitted  ->  request  attributes
               from terminal

                 ->
               ESC [ ? 1 ; 2 c

               (``I am a VT100 with Advanced Video Option.'')
ESC [Ps ;Ps f

               Horizontal  and  Vertical  Position   [row;column]
               (default = [1,1]) (HVP)

ESC [Ps g
               Tab Clear (TBC)

                 Ps =  0 -> Clear Current Column (default)
                 Ps =  3 -> Clear All

ESC [Pm h
               Set Mode (SM)

                 Ps =  4 -> Insert Mode (IRM)
                 Ps =  2 0 -> Automatic Newline (LNM)

ESC [Pm l
               Reset Mode (RM)

                 Ps =  4 -> Replace Mode (IRM)
                 Ps =  2 0 -> Normal Linefeed (LNM)

ESC [Pm m
               Character Attributes (SGR)

                 Ps =  0 -> Normal (default)
                 Ps =  1 -> Bold
                 Ps =  4 -> Underscore
                 Ps =  5 -> Blink (appears as Bold)
                 Ps =  7 -> Inverse
ESC [Ps n

               Device Status Report (DSR)
                 Ps    =      5     ->     Status     Report

               ESC [ 0 n (``OK'')
                 Ps =  6 ->  Report  Cursor  Position  (CPR)

               [row;column] as ESC [r ;c R
ESC [Ps ;Ps r

               Set Scrolling Region [top;bottom] (default =  full
               size of window) (DECSTBM)

ESC [Ps x
               Request Terminal Parameters (DECREQTPARM)

ESC [ ?Pm h
               DEC Private Mode Set (DECSET)

                 Ps =  1 -> Application Cursor Keys (DECCKM)
                 Ps =  2 -> Designate USASCII for  character

               sets G0-G3.  (In the VT102, this selects VT52 mode
               (DECANM), which xterm doesn't support.)

                 Ps =  3 -> 132 Column Mode (DECCOLM)
                 Ps =  4 -> Smooth (Slow) Scroll (DECSCLM)

                 Ps =  5 -> Reverse Video (DECSCNM)
                 Ps =  6 -> Origin Mode (DECOM)

                 Ps =  7 -> Wraparound Mode (DECAWM)
                 Ps =  8 -> Auto-repeat Keys (DECARM)

                 Ps =  9 -> Send  Mouse  X  &  Y  on  button
               press.  See the section Mouse Tracking.

                 Ps =   3 8  ->  Enter  Tektronix  Mode
               (DECTEK)

                 Ps =  4 0 -> Allow 80 <--> 132 Mode
                 Ps =  4 1 -> curses(5) fix

                 Ps =  4 4 -> Turn On Margin Bell
                 Ps =  4 5 -> Reverse-wraparound Mode

                 Ps =  4 6 -> Start Logging
                 Ps =   4 7  ->  Use  Alternate  Screen

               Buffer   (unless   disabled   by  the  titeInhibit
               resource)

                 Ps =  1 0 0 0 -> Send  Mouse
               X  &  Y on button press and release.  See the sec-

               tion Mouse Tracking.
                 Ps =  1 0 0 1 -> Use  Hilite

               Mouse Tracking.  See the section Mouse Tracking.
ESC [ ?Pm l

               DEC Private Mode Reset (DECRST)
                 Ps =  1 -> Normal Cursor Keys (DECCKM)

                 Ps =  3 -> 80 Column Mode (DECCOLM)
                 Ps =  4 -> Jump (Fast) Scroll (DECSCLM)

                 Ps =  5 -> Normal Video (DECSCNM)
                 Ps =  6 -> Normal Cursor Mode (DECOM)

                 Ps =  7 -> No Wraparound Mode (DECAWM)
                 Ps =  8 -> No Auto-repeat Keys (DECARM)

                 Ps =  9 -> Don't Send Mouse X & Y on button press

                 Ps =  4 0 -> Disallow 80 <--> 132 Mode
                 Ps =  4 1 -> No curses(5) fix

                 Ps =  4 4 -> Turn Off Margin Bell
                 Ps =  4 5  ->  No  Reverse-wraparound

               Mode
                 Ps =  4 6 -> Stop Logging
                 Ps =  4 7 -> Use Normal Screen Buffer
                 Ps =  1 0 0 0 -> Don't  Send

               Mouse X & Y on button press and release
                 Ps =  1 0 0 1 ->  Don't  Use

               Hilite Mouse Tracking
ESC [ ?Pm r

               Restore DEC Private Mode Values.  The value of  Ps
               previously  saved  is restored.  Ps values are the

               same as for DECSET.
ESC [ ?Pm s

               Save DEC Private Mode Values.  Ps values  are  the
               same as for DECSET.

ESC ]Ps ;PtBEL
               Set Text Parameters

                 Ps =  0 ->  Change  Icon  Name  and  Window
               Title to Pt

                 Ps =  1 -> Change Icon Name to Pt
                 Ps =  2 -> Change Window Title to Pt

                 Ps =  4 6 -> Change  Log  File  to  Pt
               (normally disabled by a compile-time option)

                 Ps =  5 0 -> Set Font to Pt
ESC ^PtESC \

               Privacy Message (PM)
                 xterm implements no PM functions; Pt is ignored.

               Pt need not be printable characters.
ESC PtESC \

               Application Program Command (APC)
                 xterm  implements  no  APC  functions;   Pt   is

               ignored.  Pt need not be printable characters.
ESC c Full Reset (RIS)

ESC n Select the G2 Character Set (LS2)
ESC o Select the G3 Character Set (LS3)

ESC  Invoke the G3 Character Set as GR (LS3R).  Has  no
               visible effect in xterm.

ESC } Invoke the G2 Character Set as GR (LS2R).  Has  no
               visible effect in xterm.

ESC ~ Invoke the G1 Character Set as GR (LS1R).  Has  no
               visible effect in xterm.

Mouse Tracking

The VT widget can be set to send the  mouse  position  and  other
information on button presses.  These modes are typically used by
editors and other full-screen applications that want to make  use
of the mouse.
There are three mutually exclusive modes, each enabled  (or  dis-
abled)  by a different parameter in the DECSET (or DECRST) escape
sequence.  Parameters for all  mouse  tracking  escape  sequences
generated  by xterm encode numeric parameters in a single charac-
ter as value+040.  For example,  ! is 1.  The screen  coodi-
nate system is 1-based.

X10 compatibility mode sends an escape sequence on  button  press
encoding  the  location  and  the  mouse  button  pressed.  It is
enabled by specifying parameter 9 to DECSET.   On  button  press,
xterm  sends  ESC [ MCbCxCy  (6 characters).  Cb is
button-1.  Cx and Cy are the x and y  coordinates  of  the  mouse
when the button was pressed.

Normal tracking mode sends an  escape  sequence  on  both  button
press  and  release.   Modifier  information is also sent.  It is
enabled by specifying parameter 1000 to DECSET.  On button  press
or release, xterm sends ESC [ MCbCxCy.  The low two
bits of  Cb  encode  button  information:  0=MB1  pressed,  1=MB2
pressed,  2=MB3  pressed,  3=release.  The upper bits encode what
modifiers were down when the button was  pressed  and  are  added
together.   4=Shift, 8=Meta, 16=Control.  Cx and Cy are the x and
y coordinates of the mouse  event.   The  upper  left  corner  is
(1,1).
Mouse hilite tracking notifies  a  program  of  a  button  press,
receives a range of lines from the program, highlights the region
covered by the mouse within that range until button release,  and
then sends the program the release coordinates.  It is enabled by
specifying parameter 1001 to DECSET.  Warning: use of  this  mode
requires  a cooperating program or it will hang xterm.  On button
press, the same information as for normal tracking is  generated;
xterm  then waits for the program to send mouse tracking informa-
tion.  All X events are ignored until the proper escape  sequence
is           received           from           the           pty:
ESC [Ps ;Ps ;Ps ;Ps ;Ps T.  The
parameters are func, startx, starty, firstrow, and lastrow.  func
is non-zero to  initiate  hilite  tracking  and  zero  to  abort.
startx  and  starty  give  the  starting x and y location for the
highlighted region.  The ending location tracks  the  mouse,  but
will  never  be  above  row firstrow and will always be above row
lastrow.  (The top of the screen is row 1.) When  the  button  is
released,  xterm  reports the ending position one of two ways: if
the  start  and  end  coordinates  are  valid   text   locations:
ESC [ tCxCy.   If either coordinate is past the end
of the line: ESC [ TCxCyCxCyCxCy.   The  parameters
are  startx,  starty,  endx,  endy,  mousex, and mousey.  startx,
starty, endx, and endy give the  starting  and  ending  character
positions  of  the region. mousex and mousey give the location of
the mouse at button up, which may not be over a character.

Tektronix 4014 Mode

Most of these  sequences  are  standard  Tektronix  4014  control
sequences.   The  major  features  missing are the write-thru and
defocused modes.  This document does not  describe  the  commands
used  in  the  various Tektronix plotting modes but does describe
the commands to switch modes.

BEL        Bell (Ctrl-G)

BS         Backspace (Ctrl-H)
TAB        Horizontal Tab (Ctrl-I)

LF         Line Feed or New Line (Ctrl-J)
VT         Cursor up (Ctrl-K)

FF         Form Feed or New Page (Ctrl-L)
CR         Carriage Return (Ctrl-M)

ESCETX Switch to VT100 Mode (ESC Ctrl-C)
ESCENQ Return Terminal Status (ESC Ctrl-E)

ESCLF  PAGE (Clear Screen)
ESCSO  Begin 4015 APL mode (ignored by xterm) (ESC  Ctrl-

               N)
ESCSI  End 4015 APL mode (ignored by xterm) (ESC Ctrl-O)

ESCETB COPY (Save  Tektronix  Codes  to  file  COPYyy-mm-
               dd.hh:mm:ss) (ESC Ctrl-W)

ESCCAN Bypass Condition (ESC Ctrl-X)
ESCSUB GIN mode (ESC Ctrl-Z)

ESCFS  Special Point Plot Mode (ESC Ctrl-\)
ESC 8 Select Large Character Set

ESC 9 Select #2 Character Set
ESC : Select #3 Character Set

ESC ; Select Small Character Set
ESC ]Ps ;PtBEL

               Set Text Parameters of VT window
                 Ps =  0 ->  Change  Icon  Name  and  Window

               Title to Pt
                 Ps =  1 -> Change Icon Name to Pt

                 Ps =  2 -> Change Window Title to Pt
                 Ps =  4 6 -> Change Log File to Pt

ESC ` Normal Z Axis and Normal (solid) Vectors
ESC a Normal Z Axis and Dotted Line Vectors

ESC b Normal Z Axis and Dot-Dashed Vectors
ESC c Normal Z Axis and Short-Dashed Vectors

ESC d Normal Z Axis and Long-Dashed Vectors
ESC h Defocused Z Axis and Normal (solid) Vectors

ESC i Defocused Z Axis and Dotted Line Vectors
ESC j Defocused Z Axis and Dot-Dashed Vectors

ESC k Defocused Z Axis and Short-Dashed Vectors
ESC l Defocused Z Axis and Long-Dashed Vectors

ESC p Write-Thru Mode and Normal (solid) Vectors
ESC q Write-Thru Mode and Dotted Line Vectors

ESC r Write-Thru Mode and Dot-Dashed Vectors
ESC s Write-Thru Mode and Short-Dashed Vectors

ESC t Write-Thru Mode and Long-Dashed Vectors
FS         Point Plot Mode (Ctrl-\)

GS         Graph Mode (Ctrl-])
RS         Incremental Plot Mode (Ctrl-^)

US         Alpha Mode (Ctrl-)
=========================== from irixterm(1): ===========================
