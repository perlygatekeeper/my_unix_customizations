#!/usr/bin/env perl
# A perl script to SCRIPT_DESCRIPTION

my $name = $0; $name =~ s'.*/''; # remove path--like basename
my $usage = "usage: $name [-l] [-n] [-f TERMCAP_file] [-e TERM ... ]\n";

use strict;
use warnings;

exit 0;

__END__

#-----------------------------------------------------------------------------

#   ***   Define Strings, Values & Flags   ***
$name =~ s'.*/'';
$usage = "usage: $name [-l] [-n] [-f TERMCAP_file] [-e TERM ... ]\n";
$entry=0;
$explaination_flag=1;
$locate_only_flag=0;
$recursive_call=0;
$file_flag=1;
# $explain="/opt/home/parker/bin/termcaps/term.caps.4.1";
# $termcap_default="/usr/share/lib/termcap"; # for sparcs
$termcap_default="/etc/termcap"; # for RHEL

#   ***   Parse Command Line Argument(s)   ***
while ( @ARGV >= 1 ) {
  if ( $ARGV[0] eq '-e' ) {
    $entries[$entry++] = $ARGV[1];
    shift; shift;
    until ( $ARGV[0] =~ /^-[^-]/ || @ARGV == 0 ) { 
      $entries[$entry++] = $ARGV[0];
      shift;
    }  # end while
  } # end if 
  elsif ( $ARGV[0] eq '-f' ) {
    $termcap = $ARGV[1];
    shift; shift; }
  elsif ( $ARGV[0] eq '-n' ) { shift; $explaination_flag=0; }
  elsif ( $ARGV[0] eq '-l' ) { shift; $locate_only_flag=1; }
  elsif ( $ARGV[0] eq '-t' ) {
    shift;
    $recursive_call=1; }
  else { print "Illegal argument: \"$ARGV[0]\"\n"; die $usage; }
}  # end while

#   ***   Determine TERM Entry & TERMCAP File or Environment Variable   ***
if ( $entry == 0  )  { $entries[$entry]=$ENV{"TERM"}; }
if ( $termcap =~ "^\$" )  { $termcap=$ENV{"TERMCAP"}; }
if ( $termcap =~ "^\$" )  { # didn't find "TERMCAP" in environment
  $termcap=$termcap_default;
} else { # DID find "TERMCAP" in environment
  if ( $termcap =~ /^\// ) { # TERMCAP was a path to a file
  } else { # TERMCAP was NOT a path to a file
  $file_flag=0;
  } # end if/else
} # end if/else

#   *** Report on planned activity   ***
print "Attempting to find $entries[0]";
if (@entries >1) {
  for ($entry=1; $entry<=($#entries-1); $entry++) {
    print ", $entries[$entry]";
  } # end for
  print " & $entries[$#entries]";
} # end if
if ($file_flag) {
  print " in $termcap.\n";
} else {
  print " in \$TERMCAP.\n";
}

#   ***   MAIN LOOP ON ENTRIES   ***
for ($entry=0; $entry<=$#entries; $entry++) {
#   ***   Find TERM Entry in TERMCAP   ***
$line=0;
if ($file_flag) {
  $found=0;                         # start search
  open(TERMCAP,"$termcap") || die("$0: cannot open $termcap file.\n");
  while(<TERMCAP>) {
    chop;
    if ($found) {
      $test=chop;                   # use $test later
      $entryline[$line++]=$_;       # makes end_point_inclusive
      if ("$test" ne "\\" ) {       # NEW test for 'OFF' condition
	$entryline[$line-1].=$test; # don't know what it was so put it back
	if ($locate_only_flag) { print $_.$test."\n"; }
	last;                       # terminates search after entry is found
        $found=0;
      } # end if
      if ($locate_only_flag) { print $_."\n"; }
    } else {
      if ($_ =~ /^[^\s#]*.*$entries[$entry]\|/) {   # test for 'ON' condition
	chop;
        $entryline[$line++]=$_; # makes begin_point_inclusive
        if ($locate_only_flag) { print $_."\n"; }
        $found=1;
      } # end if
    } # end if/else
  } # end while
  close(TERMCAP);
} else { # TERMCAP contains entries
#   $entryline[$line++]=$termcap;
    $termcap=~/^([^:]*):(.*)$/;
    $entryline[$line++]=$1;
    $entryline[$line++]=$2;
} # end if/else

if ($locate_only_flag) { next; }

#   ***   Strip Seperate Capabilities and Sort Them   ***
$n=0; @caps=();
print $entryline[0] ."\n";
for ($lines=1; $lines<=$#entryline; $lines++)
{                                    # loop on entry lines
$entryline[$lines] =~ s/^[\s:]+//g;  # remove leading whitespace and :'s
$n += split(/:/,$entryline[$lines]); # split entry line on :'s
@caps=(@caps,@_);                    # add @_ to array @caps
} # end for on entry lines

$tc_flag=($caps[$#caps]=~/^tc=(.*)[:]?/); # set flag for for similar terminal entry
$tc_entry=$1;
@caps=sort(@caps);                    # sort array @caps

#   ***   Add Terminal Capability from Appropriate File   ***
if ($explaination_flag) {

# LOAD EXPLAIN ARRAY
  if (! @explain) {
    while (<DATA>) {
      if ($_=~/^(..)\S*\s*/) {
        $explain{$1}=$';
      }
    } # end while
  } # end if

  for ($i=0; $i<=$#caps; $i++) {

# Don't bother adding explaination for duplicate entries.
if ( ($i>0) && ( "$cap" eq substr($caps[$i],0,2) ) ) { next; }

$cap=$caps[$i];      # copy cap
$cap=~s/^(..).*/\1/; # strip first two characters for cap search
$cap=~s/k[1-9]/k0/;  # change 'k' 1-9 to 'k0'
$cap=~s/l[1-9]/l0/;  # change 'l' 1-9 to 'l0'
$cap=~s/F[2-9]/F1/;  # change 'F' 2-9 to 'F1'
$cap=~s/F[B-Z]/FA/;  # change 'F' B-Z to 'FA'
$cap=~s/F[b-r]/Fa/;  # change 'F' b-r to 'Fa'
                     # these are special cases that are grouped in
                     # the the term.cap files for SunOS 3.5 and 4.1

# $maxlength=14 used in the two following lines
if (length($caps[$i])>14) { $caps[$i].="\n"; $caps[$i].= " " x 14 ; }
$caps[$i]=sprintf("%-14s %s", $caps[$i],$explain{$cap});
chop($caps[$i]);

  } # end for 
} # end if

if ($tc_flag) {
  print "Entry similar to $tc_entry\n";
  print "except for the following additions/changes:\n"; }

print join("\n",@caps)."\n";

if ($tc_flag && $explaination_flag) {
  print "\nNow for termcap entry $tc_entry\n" . "-" x 45 . "\n";
  print `$0 -e $tc_entry -f $termcap`;
} # end if

} # end for on entries

#   ***   EXIT GRACEFULLY   ***

# print  "All done.\007\n";
exit 0;

####   SUBROUTINES   ####

sub load_descriptions {
  my $termcaps;
  while (<DATA>) {
    next if (/^\s*$|^\s*#/); # skip white, blank and commented lines.
    my ( $name, $type, $notes, $description ) =
    ( $_ =~
      qr(
        (..)-?\S*\s+      # Name
        (\S{1,4})\s{1,5}  # Type
	    (\([^)]+\))?\s+   # Notes
	    (\S.*)$           # Description
      )x
    );
	$termcaps->{$name} = {
	  type        => $type,
	  notes       => $notes,
	  description => $notes,
	}
  }
  return $termcaps;
}
__END__

#Name    Type   Notes   Description
!1      str            sent by shifted save key
!2      str            sent by shifted suspend key
!3      str            sent by shifted undo key
#1      str            sent by shifted help key
#2      str            sent by shifted home key
#3      str            sent by shifted input key
#4      str            sent by shifted left-arrow key
%0      str            sent by redo key
%1      str            sent by help key
%2      str            sent by mark key
%3      str            sent by message key
%4      str            sent by move key
%5      str            sent by next-object key
%6      str            sent by open key
%7      str            sent by options key
%8      str            sent by previous-object key
%9      str            sent by print or copy key
%a      str            sent by shifted message key
%b      str            sent by shifted move key
%c      str            sent by shifted next-object key
%d      str            sent by shifted options key
%e      str            sent by shifted previous-object key
%f      str            sent by shifted print or copy key
%g      str            sent by shifted redo key
%h      str            sent by shifted replace key
%i      str            sent by shifted right-arrow key
%j      str            sent by shifted resume key
&0      str            sent by shifted cancel key
&1      str            sent by ref(erence) key
&2      str            sent by refresh key
&3      str            sent by replace key
&4      str            sent by restart key
&5      str            sent by resume key
&6      str            sent by save key
&7      str            sent by suspend key
&8      str            sent by undo key
&9      str            sent by shifted beg(inning) key
*0      str            sent by shifted find key
*1      str            sent by shifted cmd (command) key
*2      str            sent by shifted copy key
*3      str            sent by shifted create key
*4      str            sent by shifted delete-char key
*5      str            sent by shifted delete-line key
*6      str            sent by select key
*7      str            sent by shifted end key
*8      str            sent by shifted clear-line key
*9      str            sent by shifted exit key
5i      bool           printer will not echo on screen
@0      str            sent by find key
@1      str            sent by beg(inning) key
@2      str            sent by cancel key
@3      str            sent by close key
@4      str            sent by cmd (command) key
@5      str            sent by copy key
@6      str            sent by create key
@7      str            sent by end key
@8      str            sent by enter/send key (unreliable)
@9      str            sent by exit key
AL      str    (NP*)   add n new blank lines
CC      str            terminal settable command character in prototype
CM      str    (NP)    memory-relative cursor motion to row m, column n
DC      str    (NP*)   delete n characters
DL      str    (NP*)   delete n lines
DO      str    (NP*)   move cursor down n lines
EP      bool    (o)    even parity
F1-F9   str            sent by function keys 11-19
FA-FZ   str            sent by function keys 20-45
Fa-Fr   str            sent by function keys 46-63
HC      bool           cursor is hard to see
HD      bool    (o)    half-duplex
IC      str    (NP*)   insert n blank characters
K1      str            sent by keypad upper left
K2      str            sent by keypad center
K3      str            sent by keypad upper right
K4      str            sent by keypad lower left
K5      str            sent by keypad lower right
LC      bool    (o)    lower-case only
LE      str    (NP)    move cursor left n positions
LF      str     (P)    turn off soft labels
LO      str     (P)    turn on soft labels
MC      str     (P)    clear left and right soft margins
ML      str     (P)    set soft left margin
MR      str     (P)    set soft right margin
NL      bool    (o)    \n is NEWLINE, not LINEFEED
NP      bool           pad character does not exist
NR      bool           ti does not reverse te
Nl      num            number of labels on screen (start at 1)
OP      bool    (o)    odd parity
RA      str     (P)    turn off automatic margins
RF      str            send next input character (for ptys)
RI      str    (NP)    move cursor right n positions
RX      str     (P)    turn off xoff/xon handshaking
SA      str     (P)    turn on automatic margins
SF      str    (NP*)   scroll forward n lines
SR      str    (NP*)   scroll backward n lines
SX      str     (P)    turn on xoff/xon handshaking
UC      bool    (o)    upper-case only
UP      str    (NP*)   move cursor up n lines
XF      str            x-off character (default DC3)
XN      str            x-on character (default DC1)
ac      str            graphic character set pairs aAbBcC - def=VT100
ae      str     (P)    end alternate character set
al      str    (P*)    add new blank line
am      bool           terminal has automatic margins
as      str     (P)    start alternate character set
bc      str     (o)    backspace if not ^H
bl      str     (P)    audible signal (bell)
bs      bool    (o)    terminal can backspace with ^H
bt      str     (P)    back-tab
bw      bool           le (backspace) wraps from column 0 to last column
cb      str     (P)    clear to beginning of line, inclusive
cd      str    (P*)    clear to end of display
ce      str     (P)    clear to end of line
ch      str    (NP)    set cursor column (horizontal position)
cl      str    (P*)    clear screen and home cursor
cm      str    (NP)    screen-relative cursor motion to row m, column n
co      num            number of columns in a line
cr      str    (P*)    RETURN
cs      str    (NP)    change scrolling region to lines m through n (VT100)
ct      str     (P)    clear all tab stops
cv      str    (NP)    set cursor row (vertical position)
dB      num     (o)    milliseconds of bs delay needed (default 0)
dC      num     (o)    milliseconds of cr delay needed (default 0)
dF      num     (o)    milliseconds of ff delay needed (default 0)
dN      num     (o)    milliseconds of nl delay needed (default 0)
dT      num     (o)    milliseconds of horizontal tab delay needed (default 0)
dV      num     (o)    milliseconds of vertical tab delay needed (default 0)
da      bool           display may be retained above the screen
db      bool           display may be retained below the screen
dc      str    (P*)    delete character
dl      str    (P*)    delete line
dm      str            enter delete mode
do      str            down one line
ds      str            disable status line
eA      str     (P)    enable graphic character set
ec      str    (NP)    erase n characters
ed      str            end delete mode
ei      str            end insert mode
eo      bool           can erase overstrikes with a blank
es      bool           escape can be used on the status line
ff      str    (P*)    hardcopy terminal page eject
fs      str            return from status line
gn      bool           generic line type (for example dialup, switch)
hc      bool           hardcopy terminal
hd      str            half-line down (forward 1/2 linefeed)
ho      str     (P)    home cursor
hs      bool           has extra "status line"
hu      str            half-line up (reverse 1/2 linefeed)
hz      bool           cannot print ~s (Hazeltine)
i1      str            terminal initialization string (terminfo only)
i3      str            terminal initialization string (terminfo only)
iP      str            pathname of program for initialization (terminfo only)
ic      str    (P*)    insert character
if      str            name of file containing initialization string
im      str            enter insert mode
in      bool           insert mode distinguishes nulls
ip      str    (P*)    insert pad after character inserted
is      str            terminal initialization string
it      num            tab stops initially every n positions
k0-k9   str            sent by function keys 0-9
k;      str            sent by function key 10
kA      str            sent by insert-line key
kB      str            sent by back-tab key
kC      str            sent by clear-screen or erase key
kD      str            sent by delete-character key
kE      str            sent by clear-to-end-of-line key
kF      str            sent by scroll-forward/down key
kH      str            sent by home-down key
kI      str            sent by insert-character or enter-insert-mode key
kL      str            sent by delete-line key
kM      str            sent by insert key while in insert mode
kN      str            sent by next-page key
kP      str            sent by previous-page key
kR      str            sent by scroll-backward/up key
kS      str            sent by clear-to-end-of-screen key
kT      str            sent by set-tab key
ka      str            sent by clear-all-tabs key
kb      str            sent by backspace key
kd      str            sent by down-arrow key
ke      str            out of "keypad transmit" mode
kh      str            sent by home key
kl      str            sent by left-arrow key
km      bool           has a "meta" key (shift, sets parity bit)
kn      num     (o)    number of function (k0-k9) keys (default 0)
ko      str     (o)    termcap entries for other non-function keys
kr      str            sent by right-arrow key
ks      str            put terminal in "keypad transmit" mode
kt      str            sent by clear-tab key
ku      str            sent by up-arrow key
l0-l9   str            labels on function keys 0-9 if not f0-f9
la      str            label on function key 10 if not f10
le      str     (P)    move cursor left one position
lh      num            number of rows in each label
li      num            number of lines on screen or page
ll      str            last line, first column
lm      num            lines of memory if > li (0 means varies)
lw      num            number of columns in each label
ma      str     (o)    arrow key map (used by vi version 2 only)
mb      str            turn on blinking attribute
md      str            turn on bold (extra bright) attribute
me      str            turn off all attributes
mh      str            turn on half-bright attribute
mi      bool           safe to move while in insert mode
mk      str            turn on blank attribute (characters invisible)
ml      str     (o)    memory lock on above cursor
mm      str            turn on "meta mode" (8th bit)
mo      str            turn off "meta mode"
mp      str            turn on protected attribute
mr      str            turn on reverse-video attribute
ms      bool           safe to move in standout modes
mu      str     (o)    memory unlock (turn off memory lock)
nc      bool    (o)    no correctly-working cr (Datamedia 2500, Hazeltine 2000)
nd      str            non-destructive space (cursor right)
nl      str     (o)    NEWLINE character if not
ns      bool    (o)    terminal is a CRT but does not scroll
nw      str     (P)    NEWLINE (behaves like cr followed by do)
nx      bool           padding will not work, xoff/xon required
os      bool           terminal overstrikes
pO      str     (N)    turn on the printer for n bytes
pb      num            lowest baud where delays are required
pc      str            pad character (default NUL)
pf      str            turn off the printer
pk      str            program function key n to type string s (terminfo only)
pl      str            program function key n to execute string s (terminfo only)
pn      str    (NP)    program label n to show string s (terminfo only)
po      str            turn on the printer
ps      str            print contents of the screen
pt      bool    (o)    has hardware tab stops (may need to be set with is)
px      str            program function key n to transmit string s (terminfo only)
r1      str            reset terminal completely to sane modes (terminfo only)
r2      str            reset terminal completely to sane modes (terminfo only)
r3      str            reset terminal completely to sane modes (terminfo only)
rP      str     (P)    like ip but when in replace mode
rc      str     (P)    restore cursor to position of last sc
rf      str            name of file containing reset string
ri       ?             unknown at present
rp      str    (NP*)   repeat character c n times
rs      str            reset terminal completely to sane modes
sa      str    (NP)    define the video attributes (9 parameters)
sc      str     (P)    save cursor position
se      str            end standout mode
sf      str     (P)    scroll text up
sg      num            number of garbage chars left by so or se (default 0)
so      str            begin standout mode
sr      str     (P)    scroll text down
st      str            set a tab stop in all rows, current column
ta      str     (P)    move cursor to next 8-position hardware tab stop
tc      str            entry of similar terminal - must be last
te      str            string to end programs that use termcap
ti      str            string to begin programs that use termcap
ts      str     (N)    go to status line, column n
uc      str            underscore one character and move past it
ue      str            end underscore mode
ug      num            number of garbage chars left by us or ue (default 0)
ul      bool           underline character overstrikes
up      str            upline (cursor up)
us      str            start underscore mode
vb      str            visible bell (must not move cursor)
ve      str            make cursor appear normal (undo vs/vi)
vi      str            make cursor invisible
vs      str            make cursor very visible
vt      num            virtual terminal number (not supported on all systems)
wi      str     (N)    set current window to lines i through j, columns m through n
ws      num            number of columns in status line
xb      bool           Beehive (f1=ESC, f2=^C)
xn      bool           NEWLINE ignored after 80 cols (Concept)
xo      bool           terminal uses xoff/xon handshaking
xr      bool    (o)    RETURN acts like ce cr nl (Delta Data)
xs      bool           standout not erased by overwriting (Hewlett-Packard)
xt      bool           TAB characters destructive, magic so char (Teleray 1061)
xx      bool    (o)    Tektronix 4025 insert-line
