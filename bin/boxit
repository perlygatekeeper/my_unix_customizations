#!/usr/bin/env perl
# A perl filter to input a block of text and output that same block
# surrounded with a nice pretty "text box"

use strict;
use warnings;

my $last_mod_date='Thu, Apr 23, 2015';
my $author="Dr. Steven Parker";
my $copyright="$last_mod_date. All rights reserved.";

my $name = $0; $name =~ s'.*/''; # remove path--like basename
my $usage = "usage:\n$name";

# options?  --style style_name
#           --styles (will list them)
#           [ --trim | [ --ltrim | --rtrim ] 
#           --tight
#           --spacious
# TO DO:    --table
use Getopt::Long;
my ($debug, $style, $list_styles, $show, $unbox, $trim, $rtrim, $ltrim,);
my $tight    = 0;
my $spacious = 0;
my ($horizontal_padding, $vertical_padding,);
$spacious = 0;
$style = 'default';
GetOptions ( 'debug'           => \$debug,        # simple
             'style=s'         => \$style,        # string
             'clipped'         => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'comment1|1'      => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'comment2|2'      => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'comment3|3'      => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'light'           => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'medium'          => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'heavy'           => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'linear'          => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'bold'            => sub { my ( $style_name, ) = @_; $style = $style_name; },
             'list|styles'     => \$list_styles,  # aliases
             'tight'           => \$tight,        # simple
             'show:i@{0,2}'    => \$show,         # integer
             'spacious+'       => \$spacious,     # incrementing
             'unbox'           => \$unbox,        # simple
             'trim'            => \$trim,         # simple
             'lefttrim|ltrim'  => \$ltrim,        # aliases
             'righttrim|rtrim' => \$rtrim,        # aliases
                   );
my $styles = &set_styles;

if ( not exists $styles->{$style} ) {
  print STDERR "requested style >$style< isn't supported, using 'default'\n";
  $style = 'default';
}

if ( $debug ) { print STDERR "style is >$style<\n"; }

$horizontal_padding = 2 + $spacious - $tight;
$vertical_padding   = 1 + $spacious - $tight;

if ( $debug ) { print STDERR "before main loop\n"; }
if ( $debug and $show ) {
  use Data::Dumper;
  print "show is a " . ref($show) . "\n";
  print "show has  " . scalar(@$show) . " elements\n" if ( ref($show) eq 'ARRAY' );
  print Dumper($show) if ( ref($show) eq 'ARRAY' );
}
if ( $show and scalar(@$show) ) { 
  if ( $debug ) { print STDERR "in 'show' block\n"; }
  my $char = 'a';
  my $line;
  my $lines;
  my $margin = 5;
  my $length = $show->[0] || 5;
  my $height = $show->[1] || 5;
  if ( ($length * $height) > 26 ) {
    $char = 'aa';
  }
  foreach my $i ( 1 .. $height ) {
    $line = '';
    foreach my $i ( 1 .. $length ) { $line .= $char++; }
	push(@$lines,$line);
  }
  if ( ($length * $height) > 26 ) {
    $length = length($lines->[-1]);
  }
  &box_me( $styles->{$style}, $margin, $margin + $length,$lines ); # 5 here is for left margin
  exit 0;
} elsif ( $list_styles ) {
  if ( $debug ) { print STDERR "in 'list-styles' block\n"; }
  print join( ', ', sort keys %$styles ) . "\n";
  exit 0;
} else {
  if ( $debug ) { print STDERR "in 'filter' block\n"; }
  # slurp lines and remember the left margin and the maxium length 
  my $max_length    = 0;
  my $shortest_left = 1000;
  my ( $lines, $left_margin );
  while (<>) {
    chomp;
    if ( $trim or $ltrim ) { s/^\s*//; }
    if ( $trim or $rtrim ) { s/\s*$//; }
    push(@$lines,$_);
    next if (/^\s*$/); # skip white and blank lines.
    my $length = length($_);
    $max_length = ( ( $length > $max_length ) ? $length : $max_length );
    ( $left_margin ) = ( $_ =~ /^(\s*)/ );
    my $left_length = length($left_margin);
    $shortest_left = ( $left_length < $shortest_left ) ? $left_length : $shortest_left;
    if ( $debug ) {
      printf "%5d: %5d/%5d  %5d/%5d '%s' %s\n", $.,
             $left_length, $shortest_left, $length, $max_length, $left_margin, $_;
    }
  }
  if ($unbox) {
    if ( $debug ) {
    	print STDERR "we are unboxing\n";
    	print STDERR "starting with " . scalar (@$lines) . " lines\n";
    }
    &un_box_me( $styles->{$style}, $shortest_left, $max_length, $lines );
    if ( $debug ) {
    	print STDERR "unboxed, now printing\n";
    	print STDERR "left with " . scalar (@$lines) . " lines\n";
    }
    print "$_\n" foreach @$lines;
  } else {
    if ( $debug ) { print STDERR "we are boxing\n"; }
    &box_me( $styles->{$style}, $shortest_left, $max_length, $lines );
  }
}
if ( $debug ) { print STDERR "after main loop\n"; }

exit 0;

sub un_box_me {
  my ( $style, $shortest_left, $max_length, $lines ) = @_;
  my $left_margin = " " x $shortest_left;
  my $blank_line   = $left_margin
                   .  $style->{left}
                   .  ( " "              x ( $max_length - $shortest_left
						                   - length($style->{left}) - length($style->{right})
                   	   ) )
  	               .  $style->{right};
  my $top_line     = $left_margin
                   .  $style->{upper_left}
                   .  ( $style->{bottom} x ( $max_length - $shortest_left
						                   - length($style->{upper_left}) - length($style->{upper_right})
                   	   ) )
  	               .  $style->{upper_right};
  my $bottom_line  = $left_margin
                   .  $style->{lower_left}
                   .  ( $style->{bottom} x ( $max_length - $shortest_left
						                   - length($style->{lower_left}) - length($style->{lower_right})
                   	   ) )
  	               .  $style->{lower_right};

# testing for correct regexp for line removal
# my $a = $bottom_line;
# $a  =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;
# if ( $lines->[0] =~ qr($a) ) {
#   print STDERR "yes\n";
# } else {
#   print STDERR "no\n";
#   print STDERR " " . $lines->[0] . "    doesn't match\n";
#   print STDERR "($bottom_line)\n";
# }

  # protect the regexp characters ' ^ $ ? * + ( ) { } [ ] < > \ / . |'
  $blank_line  =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;
  $top_line    =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;
  $bottom_line =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;

  my $left   = $style->{left} . ( " " x $horizontal_padding);
  my $right  = ( " " x $horizontal_padding ) .  $style->{right};
  $left      =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;
  $right     =~ s/([\$\^*\[\]{}.<>()+?\/\\|])/\\$1/g;

  print STDERR " starting with " . scalar (@$lines) . " lines\n" if ($debug);
  @$lines = grep( ( $_ !~ /$bottom_line/ and $_ !~ /$top_line/ and $_ !~ /$blank_line/ ), @$lines );
  print STDERR " left with " . scalar (@$lines) . " lines\n" if ($debug);

# individual testing of top, bottom and blank line removal regualar expressions
# if ($debug) {
#   print STDERR " starting with " . scalar (@$lines) . " lines\n";
#   print STDERR "bottom regexp is ($bottom_line)\n" if ($debug);
#   my @a = grep { ( $_ !~ qr($bottom_line) )  } @$lines;
#   print STDERR "1 left with " . scalar (@a) . " lines after bottom removal\n";
#   print STDERR "top    regexp is ($top_line)\n" if ($debug);
#   my @b = grep( $_ !~ /$top_line/, @$lines );
#   print STDERR "2 left with " . scalar (@b) . " lines after top    removal\n";
#   print STDERR "blank  regexp is ($blank_line)\n" if ($debug);
#   my @c = grep( $_ !~ /$blank_line/, @$lines );
#   print STDERR "3 left with " . scalar (@c) . " lines after blank  removal\n";
# }

  foreach my $line ( @$lines ) {
    $line =~ s/^(\s*)$left/$1/;
    $line =~ s/$right$//;
    if ( $trim or $ltrim ) { $line =~ s/^\s*//; }
    if ( $trim or $rtrim ) { $line =~ s/\s*$//; }
  }
  return ( $style, $shortest_left, $max_length, $lines );
}

sub box_me {
  my ( $style, $shortest_left, $max_length, $lines ) = @_;
#  |<- left margin ->|L|<---  horizontal run --->|R      L is left  box characters
# ^                   /---------------------------\      R is right box characters
# ^                   |                           | V
# ^                   |                           | V  VVV is veritical padding
# ^                   |                           | V
# ^                   |__Contents of the box....__|
# ^                    HH                       HH      HH is horizonal padding
  my $left_margin = " " x $shortest_left;
  my $blank_line   = $left_margin .
                     $style->{left} .
                     ( " " x $horizontal_padding ) .  " " x ( $max_length - $shortest_left ) . ( " " x $horizontal_padding ) . # horizontal run, middle
                     $style->{right} . "\n";
  my $top_line     = $left_margin .
                     $style->{upper_left} .
                     ( $style->{top}    x ($max_length - $shortest_left + 2*$horizontal_padding) ) . # horizontal run, top
                     $style->{upper_right} . "\n";
  my $bottom_line  = $left_margin .
                     $style->{lower_left} .
                     ( $style->{bottom} x ($max_length - $shortest_left + 2*$horizontal_padding) ) . # horizontal run, bottom
                     $style->{lower_right} . "\n";
  print $top_line;
  print $blank_line for ( 1 .. $vertical_padding);
  foreach my $line (@$lines) {
    $line =~ s/^$left_margin// if $left_margin; # trim left margin
    my $right_padding = $max_length - $shortest_left - length($line);
    print $left_margin . $style->{left} .     ( " " x $horizontal_padding ) .
          $line .  ( " " x $right_padding ) .
              ( " " x $horizontal_padding ) . $style->{right} . "\n";
  }
  print $blank_line for ( 1 .. $vertical_padding);
  print $bottom_line;
}


sub set_styles {
  my ( $style, $styles, $location, );

  $style='default';
  $styles->{$style}{top}         = q(-);
  $styles->{$style}{bottom}      = q(-);
  $styles->{$style}{left}        = q(|);
  $styles->{$style}{right}       = q(|);
  $styles->{$style}{upper_left}  = q(+);
  $styles->{$style}{upper_right} = q(+);
  $styles->{$style}{lower_left}  = q(+);
  $styles->{$style}{lower_right} = q(+);

  $style='clipped';
  $styles->{$style}{top}         = q(-);
  $styles->{$style}{bottom}      = q(-);
  $styles->{$style}{left}        = q(|);
  $styles->{$style}{right}       = q(|);
  $styles->{$style}{upper_left}  = q(/);
  $styles->{$style}{upper_right} = q(\\);
  $styles->{$style}{lower_left}  = q(\\);
  $styles->{$style}{lower_right} = q(/);

  $style='bold';
  $styles->{$style}{top}         = q(=);
  $styles->{$style}{bottom}      = q(=);
  $styles->{$style}{left}        = q(H);
  $styles->{$style}{right}       = q(H);
  $styles->{$style}{upper_left}  = q(@);
  $styles->{$style}{upper_right} = q(@);
  $styles->{$style}{lower_left}  = q(@);
  $styles->{$style}{lower_right} = q(@);

  $style='comment2';
  $styles->{$style}{top}         = q(*);
  $styles->{$style}{bottom}      = q(*);
  $styles->{$style}{left}        = q(*);
  $styles->{$style}{right}       = q(*);
  $styles->{$style}{upper_left}  = q(/);
  $styles->{$style}{upper_right} = q(\\);
  $styles->{$style}{lower_left}  = q(\\);
  $styles->{$style}{lower_right} = q(/);

  $style='comment1';
  foreach $location ( qw( top bottom left right upper_left upper_right lower_left lower_right ) ) {
    $styles->{$style}{$location} = q(#);
  }

  $style='light';
  foreach $location ( qw( top bottom left right upper_left upper_right lower_left lower_right ) ) {
    $styles->{$style}{$location} = q(.);
  }

  $style='medium';
  foreach $location ( qw( top bottom left right upper_left upper_right lower_left lower_right ) ) {
    $styles->{$style}{$location} = q(*);
  }

  $style='heavy';
  foreach $location ( qw( top bottom left right upper_left upper_right lower_left lower_right ) ) {
    $styles->{$style}{$location} = q(@);
  }

  $style='comment3';
  foreach $location ( qw( left upper_left lower_left ) ) {
    $styles->{$style}{$location} = q(//);
  }
  foreach $location ( qw( top bottom right upper_right lower_right ) ) {
    $styles->{$style}{$location} = q(/);
  }

  return $styles;
}

__END__

#  Normal padding
$horizontal_padding     = 2;
$vertical_padding       = 1;
+------------------+
|                  |
|  Normal padding  |
|                  |
+------------------+

#  Tight padding
$horizontal_padding     = 1;
$vertical_padding       = 0;
+---------------+
| Tight padding |
+---------------+


#  BSG (Battle Star Galatica) or Linear with clipped corners
$left           = '|';  #  /-----------\
$right          = '|';  #  |           |
$top            = '-';  #  |           |
$bottom         = '-';  #  |           |
$upper_right    = '\\'; #  |           |
$upper_left     = '/';  #  |           |
$lower_right    = '/';  #  |           |
$lower_left     = '\\'; #  \-----------/

#  Linear
$left           = '|';  #  +-----------+
$right          = '|';  #  |           |
$top            = '-';  #  |           |
$bottom         = '-';  #  |           |
$upper_right    = '+';  #  |           |
$upper_left     = '+';  #  |           |
$lower_right    = '+';  #  |           |
$lower_left     = '+';  #  +-----------+

#  Light
$left           = '.';  #  .............
$right          = '.';  #  .           .
$top            = '.';  #  .           .
$bottom         = '.';  #  .           .
$upper_right    = '.';  #  .           .
$upper_left     = '.';  #  .           .
$lower_right    = '.';  #  .           .
$lower_left     = '.';  #  .............

#  Medium
$left           = '*';  #  *************
$right          = '*';  #  *           *
$top            = '*';  #  *           *
$bottom         = '*';  #  *           *
$upper_right    = '*';  #  *           *
$upper_left     = '*';  #  *           *
$lower_right    = '*';  #  *           *
$lower_left     = '*';  #  *************

#  Heavy
$left           = '@';  #  @@@@@@@@@@@@@
$right          = '@';  #  @           @
$top            = '@';  #  @           @
$bottom         = '@';  #  @           @
$upper_right    = '@';  #  @           @
$upper_left     = '@';  #  @           @
$lower_right    = '@';  #  @           @
$lower_left     = '@';  #  @@@@@@@@@@@@@

#  Comment1
$left           = '#';  #  #############
$right          = '#';  #  #           #
$top            = '#';  #  #           #
$bottom         = '#';  #  #           #
$upper_right    = '#';  #  #           #
$upper_left     = '#';  #  #           #
$lower_right    = '#';  #  #           #
$lower_left     = '#';  #  #############

#  Comment2
$left           = '*';  #  /***********\
$right          = '*';  #  *           *
$top            = '*';  #  *           *
$bottom         = '*';  #  *           *
$upper_right    = '\\'; #  *           *
$upper_left     = '/';  #  *           *
$lower_right    = '/';  #  *           *
$lower_left     = '\\'; #  \***********/

#  Comment3
$left           = '//'; #  /////////////
$right          = '/';  #  //          /
$top            = '/';  #  //          /
$bottom         = '/';  #  //          /
$upper_right    = '/';  #  //          /
$upper_left     = '//'; #  //          /
$lower_right    = '/';  #  //          /
$lower_left     = '//'; #  /////////////

#  Bold
$left           = 'H';  #  @===========@
$right          = 'H';  #  H           H
$top            = '=';  #  H           H
$bottom         = '=';  #  H           H
$upper_right    = '@';  #  H           H
$upper_left     = '@';  #  H           H
$lower_right    = '@';  #  H           H
$lower_left     = '@';  #  @===========@



