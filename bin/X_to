#!/usr/bin/perl
#
# A perl script to start a (possibly arbitrary) X11-command on a remote
# host, with 3 special invocations, direct_xsession_to, xsession_to and xterm_to.
# The actions and special requirements for each of these special invocations
# are futher described in the DATA section of this script (after the __END__ token).
# 

$name = $0; $name =~ s'.*/''; # remove path--like basename
$usage = "usage:\n$name HOSTNAME [REMOTE_USERNAME] [REMOTE_COMMAND] [ARGS_TO_RCMD]";
$debug=0;
$execute=1;

$remote_host  = "$ARGV[0]"; shift;
$rcp_username =
$rsh_username = "$ARGV[0]"; shift; # this will be null string if only 1 argument
$rsh_username =~ s/^(.)/-l \1/;	   # change first char, x, to '-l x'
				   # only works if there IS a first char
$rcp_username =~ s/(.)$/\1@/;	   # change last char, x, to 'x@'
$remote_command="$ARGV[0]"; shift; # this will be null string if only 2 arguments

# DISPLAY needed only if display not determined on remote host
$DISPLAY=`cat $ENV{HOME}/.latest_display`; chomp $DISPLAY;

if (! $remote_command) {
  if      ($name =~ /xsession/) {
    $remote_command="/usr/local/bin/exec_xsession";
  } elsif ($name =~ /xterm/) {
    if ( $remote_host =~ /^spec|^tamic|^hires/i ) {
      $remote_command="/usr/X11R6/bin/nxterm -ls -display $DISPLAY";
    } else {
      $remote_command="xterm -ls -display $DISPLAY";
    }
  } else {
    die "Invoked as $name and no command to run.";
  }
}

if ($debug) {
  $debug_file="/tmp/$name.debug";
  open(DEBUG,">>$debug_file")
    || die("$name: Cannot write to '$debug_file': $!\n");
  print DEBUG "I was invoked as:\t'$name'\n";
  print DEBUG "remote host:\t'$remote_host'\n";
  print DEBUG "rsh username:\t'$rsh_username'\n";
  print DEBUG "rcp username:\t'$rcp_username'\n";
  print DEBUG "remote command:\t'$remote_command'\n\n";
}

if ($name !~ /direct/i) {
  &system("rcp $ENV{HOME}/.Xauthority	${rcp_username}${remote_host}:");
  &system("rcp $ENV{HOME}/.latest_display ${rcp_username}${remote_host}:~/.latest_display");
  if ($debug) {
    print DEBUG "copied $ENV{HOME}/.Xauthority & $ENV{HOME}/.latest_display\n";
    print DEBUG "as '${rcp_username}' to host '${remote_host}'.\n";
    print DEBUG "$ENV{HOME}/.latest_display contained:\n";
    print DEBUG `cat $ENV{HOME}/.latest_display`;
  }
} else {
  &system("rcp $ENV{HOME}/.remote_display ${rcp_username}${remote_host}:~/.latest_display");
  if ($debug) {
    print DEBUG "copied $ENV{HOME}/.remote_display\n";
    print DEBUG "as '${rcp_username}' to host '${remote_host}'.\n";
    print DEBUG "$ENV{HOME}/.remote_display contained:\n";
    print DEBUG `cat $ENV{HOME}/.remote_display`;
  }
}

&system("rsh $rsh_username $remote_host $remote_command @ARGV");

if ($debug) {
  close(DEBUG);
}

exit 0;

sub system {
  my($command)=shift;
  if ($execute) {
    if ($debug) {
      print DEBUG "system routine: '$command'\n";
    }
    system "$command";
  } else {
    print STDERR "$command\n";
  }
}


__END__

echo use:    find . -type f -exec grep '^ln' {} \; | sh
echo X_to is the 'real' file
ln -fs X_to direct_xsession_to
ln -fs X_to xsession_to
ln -fs X_to xterm_to

# INVOCATION: /usr/global/bin/xterm_to HOSTNAME [REMOTE_USERNAME]
# 
# Will run an xterm on HOSTNAME displaying on
# the most recent setting of DISPLAY, typically
# through a tunnel set up via ssh to chemistry.
# We assume that HOSTNAME doesn't necessarily
# share chemistry's /home/.Xauthority.
#
# Requirements:
# - need .rhosts access to destination HOSTNAME
# - need the following in $HOME/.login.personal:
# ---------------------------------------------------
#    # Record the latest $DISPLAY setting, to be
#    # used in $ugb/xterm_to and xsession_to scripts.
#    if ($?DISPLAY) then
#      echo $DISPLAY >! ~/.latest_display
#    endif
# ---------------------------------------------------

# INVOCATION: /usr/global/bin/xsession_to HOSTNAME [REMOTE_USERNAME]
# 
# Exactly as above except that an xsession and not an
# xterm will be run on HOSTNAME.
#
# Addtional requirement:
# - need /usr/local/bin/exec_xsession on HOSTNAME
#   that contains everything to start xsession; this
#   script will need to use the file $HOME/.latest_display
#   to set the display appropriately


# INVOCATION: /usr/global/bin/direct_xsession_to HOSTNAME [REMOTE_USERNAME]
# 
# Will create an xsession on HOSTNAME displaying on
# the host from which the user is logged on. If the connection
# to chemistry was created via ssh, this will bypass the
# ssh X11 forwarding tunnel and direct X from HOSTNAME directly back 
# to your (home) computer.
# 
# This invocation is identical to the xsession_to invocation described
# above save the following:
#
# Additional requirement:
# - need the following in $HOME/.login.personal:  
# ---------------------------------------------------
#    # Record the latest REMOTEHOST setting, to be
#    # used in the $ugb/direct_xsession_to script.
#    if ($?REMOTEHOST) then
#      echo "${REMOTEHOST}:0" >! ~/.remote_display
#    endif
# ---------------------------------------------------
# - X client startup needs to invoke this script via rexec, 
#   not telnet; otherwise REMOTEHOST would be overwritten
# - The required additions to .cshrc.personal for the
#   xterm_to/xsession_to and direct_xsession_to invocations
#   are NOT mutally exclusive and may be applied concurrently.


Here is the example of the $ulb/exec_xsession script on spec:
!/bin/bash
DISPLAY=`cat $HOME/.latest_display`
PATH=/usr/X11R6/bin:$PATH
export DISPLAY PATH
echo $PATH
. $HOME/.xsession

		*		*		*		*

Here is a newer and better example of the $ulb/exec_xsession script on spec
(January 2000):

#!/bin/bash -login
DISPLAY=`cat $HOME/.latest_display`
PATH=/usr/X11R6/bin:$PATH
export DISPLAY PATH
echo $DISPLAY $PATH

# The following was stolen from /etc/X11/xdm/Xsession by parker on 01/12/00 to redirect
# errors and output to ~/.xsession-errors
# also added the -login argument to the #! line above
# also make the source $HOME/.xsession to conditional & exec.
# actually this should just be made to BE /etc/X11/xdm/Xsession! but this will due
# for now.

# redirect errors to a file in user's home directory if we can
for errfile in "$HOME/.xsession-errors" "${TMPDIR-/tmp}/xses-$USER" "/tmp/xses-$USER"
do
    if ( cp /dev/null "$errfile" 2> /dev/null )
    then
        chmod 600 "$errfile"
        exec > "$errfile" 2>&1
        break
    fi
done

# . $HOME/.xsession
# otherwise, take default action
if [ -x "$HOME/.xsession" ]; then
    exec "$HOME/.xsession"
elif [ -x "$HOME/.Xclients" ]; then
    exec "$HOME/.Xclients"
elif [ -x /etc/X11/xinit/Xclients ]; then
    exec /etc/X11/xinit/Xclients
else
    echo "No valid xsession or Xclient file was found, $0 is giving up."
    exit 1
fi
