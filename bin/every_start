#!/usr/bin/env perl
# A perl script to print every # line, starting at a given #
# first odd then even lines is the default
# for the reverse functionality see shuffle.
$name = $0;
$name =~ s'.*/''; # remove path--like basename
$usage = "usage:\n$name [EVERY [ START (ordinal) ] ] [filename ...]";

$every=2; $start=0; # odd-even is the default
if ($name=~/^o/i) { # must be odd then even (odd starts with 1st element or element 0
  $every=2; $start=1; # odd-even is the default
} else {
  while (@ARGV) {
    if ($ARGV[0]=~/-i(nstall)?/)  { &install(); exit 0; }
    if ($ARGV[0]=~/^\d+$/)  { $every=$ARGV[0]; shift; }
    if ($ARGV[0]=~/^\d+$/)  { $start=$ARGV[0]; shift; $start--; }
    if ($ARGV[0]=~/^\-\-$/) { last; }
  }
}

@lines=<>;
print "processing " . scalar(@lines);
foreach $chunk (0 .. ($every-1)) {
  for ($i=(($start+$chunk)%$every); $i<=$#lines; $i+=$every) { print $lines[$i]; }
}

exit 0;

sub install {
  my($me)=$name;
  my($alias);
  foreach $alias ( qw(oe odd-even eo even-odd) ) {
    $i++; last if $i>10;
    if (-f $alias) { unlink($alias); }
    symlink($me,$alias);
    printf "%30s -> %s\n", $alias, $me;
  }
}


__END__

echo use:    find . -type f -exec grep '^ln' {} \; | sh
echo every_start is the 'real' file
ln -fs every_start	oe
ln -fs every_start	odd_even
ln -fs every_start	eo
ln -fs every_start	even_odd

# ie. lines thus:       	# will be rearranged to:	
# original line			odd-even  or 	even-odd
# 1                     	 1		2                     	
# 2                     	 3		4       	
# 3                     	 2		1       	
# 4                     	 4		3       	

Future project

two parameters, EVERY and START

so

NAME		EVERY	START
even-odd	2	2
odd-even	2	1

BUT we could do every third line starting with 1

oe		3	1

which would do this

orig	3,1	3,2	3,3
1	 1	 2	 3
2	 4	 5	 6
3	 7	 8	 9
4	10	11	12
5	 2	 3	 1
6	 5	 6	 4
7	 8	 9	 7
8	11	12	10
9	 3	 1	 2
10	 6	 4	 5
11	 9	 7	 8
12	12	10	11


orignal script wasn't as general:

#!/usr/bin/env perl
# A perl script to print first odd then even lines.
#
# ie. lines thus:       	# will be rearranged to:	
# 1                     	# 1	or	2                     	
# 2                     	# 3             4       	
# 3                     	# 2             1       	
# 4                     	# 4             3       	
#
# for the reverse functionality see shuffle.
$name = $0;
$name =~ s'.*/''; # remove path--like basename
$usage = "usage:\n$name [EVERY [ START ] ] [filename ...]";

@lines=<>;
if (@ARGV) {
} else {
  } elsif ($name=~/^o/i) { # must be odd then even (odd starts with 1st element or element 0
    for ($i=0; $i<=$#lines; $i+=2) { print $lines[$i]; }
    for ($i=1; $i<=$#lines; $i+=2) { print $lines[$i]; }
  } else { # must be even then odd
    for ($i=1; $i<=$#lines; $i+=2) { print $lines[$i]; }
    for ($i=0; $i<=$#lines; $i+=2) { print $lines[$i]; }
  }
}
exit 0;



 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
