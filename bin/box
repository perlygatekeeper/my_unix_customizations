#!/usr/bin/env perl
#
# A perl filter to put a box around text.
#
#
$name = $0;
$name =~ s'.*/''; # remove path--like basename
$usage = "usage:\n$name [-corners|-clipped] [-blank] [-replace] [-starting starting_string]";
$usage.= "[[-vertical] vertical ]";
$usage.= "[[-horizontal] horizontal ]";

use Debug;
#&debug('lengths');
#&debug('blanks');

$char='_';
$starting='';

&parse_args;

@text=<>;

$lws=1024;
# find leading-white-space and longest line;
foreach $line (@text) {
  chomp $line;
&debug_print('lengths',":");
  next if ($blank and $line=~/^\s*$/);
&debug_print('lengths',".");
  ($ws,$rol)=($line=~/^(\s*)(.*)$/);
  if ($lws) {
    $ws=length($ws);
    $lws=( $lws < $ws) ? $lws : $ws ;
  }
  $line_length=length($line);
  $max_length=($max_length>$line_length) ? $max_length : $line_length ;
}
&debug_print('lengths',"\n");
&debug_print('lengths',"$max_length -> ");
$max_length-=$lws;
&debug_print('lengths',"$max_length\n");
$lws= " " x $lws;

# print   content  of box
$tracking_blank_lines=0; $last_blank_line='';
foreach $line (@text) {  #  MAIN TEXT LOOP
  chomp $line;
  if ($blank and $tracking_blank_lines) { # we have found a blank line in the past and
					  # are now looking for the first non-blank line.
    if ($line=~/^\s*$/) { # we have second or latter blank line.
      $tracking_blank_lines++;
      if ($replace) {
	push(@blank_lines,$line);
	next;
	# first blank line is replaced with a lower line or a middle line
        # &horizontal_line($starting,$lws,$corners,$ll,$lr,$horizontal,$max_length);
      }
      if (not $replace or $tracking_blank_lines>2) {
        print $last_blank_line . "\n";
        $last_blank_line=$line;
      }
    } else {              # found a non-blank line while tracking blanks
    # we are done tracking (one way or the other, WRT replacing)
      $tracking_blank_lines=0; $last_blank_line='';
      if ($replace) {
      # all accumulated blank lines are printed, except for the replaced line(s).
	if ($#blank_lines==0) { # only one blank line, replace with upper or middle line
	  if (not $first_line) {
	    $first_line=1;
            &horizontal_line($starting,$lws,$corners,$ul,$ur,$horizontal,$max_length);
	  } else {
            &horizontal_line($starting,$lws,$corners,$ml,$mr,$horizontal,$max_length);
	  }
	} else { # more than one blank line
	  if ($first_line) {
	  # $blank_lines[0] is replaced with lower hor. line if not first line
            &horizontal_line($starting,$lws,$corners,$ll,$lr,$horizontal,$max_length);
	  } else {
	    &debug_print('blanks',"-0-");
	    print $blank_lines[0] . "\n";
	    $first_line=1;
	  }
	# $blank_lines[$#blank_lines] is replaced with upper hor. line
	  for ($l=1; $l<$#blank_lines; $l++) {
	    &debug_print('blanks',"-$l-");
	    print $blank_lines[$l] . "\n";
	  }
          &horizontal_line($starting,$lws,$corners,$ul,$ur,$horizontal,$max_length);
	}
        &print_line($lws,$line,$max_length);
	@blank_lines=();
      } else {
        print $last_blank_line . "\n";
        &horizontal_line($starting,$lws,$corners,$ul,$ur,$horizontal,$max_length);
        $first_line=1;
        &print_line($lws,$line,$max_length);
      }
    }
  } else {
    if ($blank and $line=~/^\s*$/) {
#     if (not $first_line) {
#       print "$line\n";
#       next;
#     }
      # first blank line is simply remembered
      $tracking_blank_lines++;
      if ($replace) {
      # and will trigger a print of a horizontal line when the number of blank lines is known
	push(@blank_lines,$line);
        next;
      } else {
        $last_blank_line=$line;
      # first blank line is noted and a closing horizontal line is printed first.
	if ($first_line) {
          &horizontal_line($starting,$lws,$corners,$ll,$lr,$horizontal,$max_length);
	}
      }
    } else {
    # print non-blank lines normally.
      if (not $first_line) {
      # print first line of box
        &horizontal_line($starting,$lws,$corners,$ul,$ur,$horizontal,$max_length);
	$first_line=1;
      }
      &print_line($lws,$line,$max_length);
    }
  }
}
# print  last line of box
if ($replace) {
  &horizontal_line($starting,$lws,$corners,$ll,$lr,$horizontal,$max_length);
  if (@blank_lines) {
    for ($l=0; $l<$#blank_lines; $l++) {
      &debug_print('blanks',"-$l-");
      print $blank_lines[$l] . "\n";
    }
  }
} elsif (not $blank) {
  &horizontal_line($starting,$lws,$corners,$ll,$lr,$horizontal,$max_length);
}

exit 0;

sub print_line {
# expects global variable '$vertical' to be set.
  my($lws,$line,$max_length)=@_;
  my($ws,$rol);
  if (($ws,$rol)=($line=~/^($lws)(.*)/) ) {
    $rol=$rol . " " x ($max_length-length($rol));
  } else {
    $ws=$lws;
    $rol=$rol . " " x ($max_length);
  }
  print $starting . $ws . $vertical . $rol . $vertical . "\n";
}

sub horizontal_line {
  my($starting,$lws,$corners,$c1,$c2,$horizontal,$length)=@_;
  print $starting . $lws;
  if ($corners) {
    print $c1 . $horizontal x ($length+$lines_width-2) . $c2 . "\n";
  } else {
    print       $horizontal x ($length+$lines_width) . "\n";
  }
}


sub parse_args {
  my $abbrev = {};
  local($true,$false)=(1,0);
# &debug('options');
  @args=('?','help');
  @help=('print this message','print this message');
  push(@args,'clipped','corners','blank','replace','backspaces','vertical','horizontal','starting');
  push(@help,'use / and \ as corners for characters - and |',
             'use + corners for characters - and |',
             'treat all blank lines as end of box lines, ie horizontal lines and corners',
             'blank lines are replaced with horizontal lines, instead of just serving as delimiters (implies blank)',
             'use backspaces to make the underline character (not implimented)',
             'define vertical character',
             'define horizontal character',
	     'define string that will start each line');
  grep(s/^([^-])/-\1/,@args);
  use Text::Abbrev;
  abbrev($abbrev, @args);

  # defaults
  $vertical='|';
  $horizontal='-';
  if (&debug_query('options')) {
      $blank=$true;
      $replace=$true;
      $corners=$true;
      $ml='>';
      $mr='<';
      $ur=$ll='\\';
      $ul=$lr='/';
  }
  while ( @ARGV >= 1 ) {
    if      ( ($abbrev->{$ARGV[0]} eq '-help' )
           || ($abbrev->{$ARGV[0]} eq '-?' ) ) {
      do help($usage);
      shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-backspaces' ) {
      $backspaces=1;
      shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-vertical' ) {
      $vertical=$ARGV[1];
      shift(@ARGV); shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-horizontal' ) {
      $horizontal=$ARGV[1];
      shift(@ARGV); shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-starting' ) {
      $starting=$ARGV[1];
      shift(@ARGV); shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-corners' ) {
      $corners=$true;
      $ml=$mr=$ur=$ll=$ul=$lr='+';
      shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-blank' ) {
      $blank=$true;
      shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-replace' ) {
      $replace=$true;
      $blank=$true;
      shift(@ARGV);
    } elsif ( $abbrev->{$ARGV[0]} eq '-clipped' ) {
      $corners=$true;
      $ml='>';
      $mr='<';
      $ur=$ll='\\';
      $ul=$lr='/';
      shift(@ARGV);
    } else {
      $vertical=$horizontal=$ARGV[0];
      shift(@ARGV);
    }
    print "$debug";
  }  # end while
  $lines_width= (2 * length($vertical));
}  # end parse_args

sub help {
  select(STDOUT); $|=1; $\=''; 
  print "@_[0]\n";
  if (@help) {
    for ($arg=$[; $arg<=$#args; $arg++) {
      printf "%-16s\t%s\n", $args[$arg], $help[$arg];
    }
  } else {
    for ($arg=$[; $arg<=$#args; $arg++) {
      print "$args[$arg]\t";
    }
    print "\n";
  }
  exit 1;
}
__END__





    1 (1) This is some test text.                          
    2 (2) With multiple lines, some short and some long.   
    3 (3) See. (followed by one blank line)                
                                                           
    4 (5) This is a single short line.                     
                                                           
                                                           
    5 (8) This is a single short line.                     
    6 (9) This is some test text.                          
    7 (10) With multiple lines, some short and some long.  
                                                           
                                                           
                                                           
    8 (14) This is a single short line.                    
    9 (15) This is some test text.                         
   10 (16) With multiple lines, some short and some long.  
                                                           
                                                           
                                                           
