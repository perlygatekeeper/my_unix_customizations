#!/usr/bin/env perl
# MAKELINE is a
# script to make a vertical line down a file
my $name = $0;
   $name =~ s'.*/''; # remove path--like basename
my $usage = "usage: $name [ [-]position ] [ <separator> ... (-) ] \n";

# ToDo?   make 'longest' argument
#         make help functionallity

use strict;
use warnings;

my $position_given;    # column given on the command line for the line to be drawn
my $position;          # column at which the line will be drawn
my $separator = $[;    # seperator_index, set to start of arrays
my @separator;         # seperator array, will contain chars looped through to make line

#   ***   Parse Command Line Argument(s)   ***
while ( @ARGV >= 1 ) {
  if ($ARGV[0] =~ /^-?\d{1,4}/ ) {
    $position_given++;
    $position=$ARGV[0];
    $position=~s/^-?//;
    shift;
  } else {
    push(@separator,$ARGV[0]);
    shift;
  }
}  # end while

if (not @separator) { push(@separator, "#"); }

while ( my $line = <> ) {
  chomp($line);
  if (! $position_given) { $position=length($line)+1; $position_given++; }

# QUESTION? pad with spaces.
  my $len = length($line);
  if ( $len <  ($position-1) ) {
    $line .= " "x($position-1-$len);
    $len = $position-1;
  }

  # NOTE: line will now be $position-1 long or greater.
  if ( $len == ($position-1) ) {
    print $line
        . $separator[$separator]
	. "\n";
  } else {
    print substr($line,0,($position-1))
        . $separator[$separator]
        . substr($line,($position-1),($len-$position+1))
	. "\n";
  }

  $separator++;
  $separator = ( $separator > $#separator ) ? $[ : $separator;
}

exit 0;
__END__

                                                           
    1 (1) This is some test text.                          
    2 (2) With multiple lines, some short and some long.   
    3 (3) See. (followed by one blank line)                
                                                           
    4 (5) This is a single short line.                     
                                                           
                                                           
    5 (8) This is a single short line.                     
    6 (9) This is some test text.                          
    7 (10) With multiple lines, some short and some long.  
                                                           
                                                           
                                                           
    8 (14) This is a single short line.                    
    9 (15) This is some test text.                         
   10 (16) With multiple lines, some short and some long.  


123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
1234567890123456789
12345678901234567890
123456789012345678901
1234567890123456789012
12345678901234567890123
123456789012345678901234
1234567890123456789012345
12345678901234567890123456
123456789012345678901234567
1234567890123456789012345678
12345678901234567890123456789
123456789012345678901234567890
1234567890123456789012345678901234567890123
__END__

echo use:    find . -type f -exec grep '^ln' {} \; | sh
echo makeline is the 'real' file
ln -fs makeline  ml
ln -fs makeline  mkline

