my @ones=(0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
          1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
          1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
          1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
          2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
          3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
          3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
          4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8);
__END__
# construct an array of 256 values for number of one bits in an byte
use integer;
my ($i,$j,$count);
foreach $i ( 0 .. 127 ) {
  $j=$i; $count=0;
  while ($j) {
    $count += $j & 001;
    $j>>=1;
  }
  $ones[$i]=$count;
}
foreach $i ( 128 .. 255 ) {
  $j=$i; $count=0;
  while ($j) {
    $count++ if ($j & 0200);
    $j<<=1;
  }
  $ones[$i]=$count;
}

@mod4=(0,1,1,2);
foreach (0..255) {
  my $j=$_;
  $count=$mod4[($j%4)]; $j>>=2;
  $count+=$mod4[($j%4)];
  $ones2[$_]=$count;
}

# foreach (0 .. 255){
#   printf "%3d\t%d\t%d\n", $_, $ones[$_], $ones2[$_];
#   print "\n" if (not (($_+1)%4));
# }
foreach (0 .. 255){
  printf "%1d,", $ones[$_];
  print "\n" if (not (($_+1)%16));
}

1;
