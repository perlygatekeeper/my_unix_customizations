#!/usr/bin/perl
#!/usr/local/localadm/bin/perl
# script to glue blocks of lines horizontially.
# number of lines may be specified or the number coming through
# is used thusly:
# 1				# 1	#4
# 2				# 2	#5
# 3	would look line		# 3
# 4
# 5
#
#-----------------------------------------------------------------------------

#   ***   Define Default Strings, Values & Flags   ***
$name = $0;
$usage = "usage:\n$name [-d delimitor_string ] [-g/-n number_lines_to_glue ]";
$usage .= "\n\t[-c columns ] [-b/-w blank/white lines break column ]";

$newline="\n";
$tab="\t";
$backspace="\010";
$formfeed="\014";

$delimitstring=$tab;
$delimitstring=~s/\\t/$tab/;
$numlines=0;
$column=2;
$line_break_flag=0;

#-----------------------------------------------------------------------------

#   ***   Parse Command Line Argument(s)   ***
while ( @ARGV >= 1 )
{ if    ( $ARGV[0] eq '-d' )
  { $delimitstring = $ARGV[1];
    $delimitstring =~ s/([^\\]?)\\n/\1$newline/g;
    $delimitstring =~ s/([^\\]?)\\t/\1$tab/g;
    $delimitstring =~ s/([^\\]?)\\b/\1$backspace/g;
    $delimitstring =~ s/([^\\]?)\\f/\1$formfeed/g;
    $delimitstring =~ /([^\\]?)\\([0-7][0-7][0-7])/;
    $octal=&ascii($2);
    $delimitstring =~ s/(\\[0-7][0-7][0-7])/$octal/e;
    shift; shift;
  }
  elsif ( ( $ARGV[0] eq '-g' ) || ( $ARGV[0] eq '-n' ) )
  { $numlines = "$ARGV[1]";
    shift; shift;
  }
  elsif ( $ARGV[0] eq '-c' )
  { $column = "$ARGV[1]";
    shift; shift;
  }
  elsif ( $ARGV[0] eq '-b' )
  { $line_break_flag = 1;
    $line_break_reg="^$";
    shift;
  }
  elsif ( $ARGV[0] eq '-w' )
  { $line_break_flag = 1;
    $line_break_reg="^\s*$";
    shift;
  }
  elsif ( $ARGV[0] eq '-?' )
  { do help($usage); }
  else { last; }
}  # end while


if ( $line_break_flag )
{ $i=0;
  $column=1;
  $new_column_flag=1;
  $line[0]=$delimitstring;
  $column_end[0]=0;

  # skip first blank/white lines

  while (<>)
  { chop;
    if ( $_ !~ /$line_break_reg/ )
    { $line[++$i]=$_;
      $line_length[$i]=length($_);
      last;
    }
  }
  
  #continue on with rest of lines

  while (<>)
  { chop;
    if ( /$line_break_reg/ )
    { if ($new_column_flag)
      { # we have found the end of a column
        # set ending index and length of this column
	$column_end[$column]  =$i;
	$column_length[$column]=$i-$column_end[$column-1];
        $column_width[$column]=&max(@line_length[$column_end[$column-1]..$i]);
        $column++;
      }
      $new_column_flag=0;
    }
    else
    { $line[++$i]=$_;
      $line_length[$i]=length($_);
      $new_column_flag=1;
    }
  }
  if ($new_column_flag)
    { # we have found the end of a column
      # set ending index and length of this column
      $column_end[$column]  =$i;
      $column_length[$column]=$i-$column_end[$column-1];
      $column_width[$column]=&max(@line_length[$column_end[$column-1]..$i]);
      }
  $numlines=&max(@column_length);

  # Write out lines! <<<<<<<<<<<<<<<<<<<

  for   ($i=1; $i<=$numlines; $i++)
  { if ($i<=$column_end[ 1]) { print "$line[$i]";}
    else { print " " x $column_width[ 1]; }
    for ($j=2; $j<=$column;  $j++)
    { print "$delimitstring";
      $k=$i+$column_end[$j-1];
      if ($k<=$column_end[$j]) { print "$line[$k]"; }
      else { print " " x $column_width[$j]; }
    }
    print "$newline";
  }

}
else
{ # Load lines (and count if necessary). <<<<<<<<<<<<<<
  $i=0;
  while (<>)
  { chop;
    $line[++$i]=$_;
    if ( $numlines && ( $i >= $numlines ) ) { last; }
  }
  $numlines=$numlines?$numlines:$i;

  # Write out lines! <<<<<<<<<<<<<<<<<<<

  # Lines 1 through N-1 <<<<<<<<<<<<<<<<<<<

  $offset=int($numlines/$column+0.99999);
  for ( $i=1; $i<=$offset-1; $i++)
  { print "$line[$i]" ;
    for ( $j=1; $j<=$column-1; $j++)
    { print "$delimitstring$line[$i+$offset*$j]"; }
    print "$newline";
  }

  # The last line.   <<<<<<<<<<<<<<<<<

  $trailer=$numlines%$column?$numlines%$column:$column;
    for ( $j=1; $j<=($trailer-1); $j++)
    { print "$line[$offset*$j]$delimitstring"; }
    print "$line[$offset*$trailer]$newline";
}

#   ***   EXIT GRACEFULLY   ***

exit 0;

####   SUBROUTINES   ####
sub help {
print "@_[0]\n";
print "Valid delimitor string expressions are:\n";
print "\\t for tabs,      \\n for newlines,\n";
print "\\f for formfeeds, \\b for backspaces\n";
print "and \### for octal ascii codes\n";
exit 1;
}
sub ascii {
# returns character whos
# ascii value equals argument 0 as
#    octal or hex number if only one arg
# OR    decimal   number if argument 2 = "d" or "D"
   if ($_[1]=="d") { return pack('C1',$_[0]); }
elsif ($_[1]=="D") { return pack('C1',$_[0]); }
return pack('C1',oct($_[0]));
}
sub max {
local($max,$entry);
# returns max of list where $_[0] is number
# of numbers to compare
#print "from max: of $#_ entries ";
$max=shift;
foreach $entry (@_) { $max=($entry>$max)?$entry:$max; }
#print "$max is the largest.\n";
return $max;
}
