## Templating structures
# Template: use warnings; use strict; __END__; usage; author; last_mod_date
snippet template
	#!/usr/bin/perl
	# A perl script to ${1:#SCRIPT_DESCRIPTION}
	$name = $0; $name =~ s'.*/''; # remove path--like basename
	$usage = "usage:\n$name [-${2:opt1}] [-${3:opt2}] [-${4:opt3}]";
	use warnings;
	use strict;
	
	${5:# body ...}
	
	exit 0;
	__END__
# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl
# use strict; use warnings;
snippet strict
	use strict;	
	use warnings;	
# Name
snippet name
	$name = $0;
	$name =~ s'.*/''; # remove path--like basename
# Usage
snippet usage
	$name = $0; $name =~ s'.*/''; # remove path--like basename
	$usage = "usage:\n$name [-${1:opt1}] [-${2:opt2}] [-${3:opt3}]";
# end
snippet end
	exit 0;
	__END__
snippet lastmod
	$last_mod_date='DATE';
snippet version
	$version="1.0"; # ${1:Comments}
snippet todo
	$todo="${1:Things yet to do.}";
snippet author
	$author="Dr. Steven Parker";
snippet copyright
	$copyright="$last_mod_date. All rights reserved.";

## Syntactict Sugar
# Hash Pointer
snippet .
	 =>


## File/Data reading/writing useful loops
# Print until
snippet printuntil
	while(<>) {
		print;
		last if (${1:condition});
	}
# Skip until
snippet skipuntil
	while(<>) {
		last if (${1:condition});
	}
snippet blank
		next if (/^\s*$|^\s*#/); # skip white, blank and commented lines.
# FILE: open to write
snippet write
	open(${1:FH},">$${2:filename}")
	  || die("$name: Can not write to '$$2': $!\n");
	while (<$1>) {
		print $1 "${3:Hello World!}\n";
	}
	close($1);
# FILE: open to append
snippet app
	open(${1:FH},">>$${2:filename}")
	  || die("$name: Can not append to $$2': $!\n");
	while (<$1>) {
		print $1 "${3:Hello World!}\n";
	}
	close($1);
# FILE: open to read
snippet read
	open(${1:FH},"<$${2:filename}")
	  || die("$name: Can not read from '$$2': $!\n");
	while (<$1>) {
		next if (/^\s*$|^\s*#/); # skip white, blank and commented lines.
		${3:# commands};
	}
	close($1);
# FILE: read from DATA
snippet data
	while (<DATA>) {
		next if (/^\s*$|^\s*#/); # skip white, blank and commented lines.
		${1:# body ...}
	}
snippet rw
	open(${1:IN},"<$${2:fromfile}") || die("$name: Cannot read from '$2': $!\n");
	open(${3:TO},">>${4:tofile}") || die("$name: Cannot append to '$4': $!\n");
	while (<$1>) {
		print $3 $_;
	}
	close($1);
	close($3);
# printing controlled by on and off conditions, via printing flag.
snippet onoff
	# will print first line mathcing on_condition up to line before off_condition
	# (on,off]
	while(<>) {
		if (${1:printing_flag}) {	# printing flag on
			if (${3:off_condition}) {
				$$1=0;
				# print;	# uncomment to make off condition inclusive
			} else {
				print;
			}
		} else {			# printing flag off
			if (${2:on_condition}) {
				$$1=1;
				print;		# makes on condition inclusive
			} else {
				1;		# do something with non-printed,no condition lines
			}
		}
		last if (${4:last_condition});
	}
snippet cmdto
	$command="| ${1:UNIX_COMMAND}";
	open(${2:COMMAND},"$command") ||
	  die("$name: Cannot ${3:COMMAND_DISCRIPTION} with '$command': $!.");
	my @results = <${2:COMMAND}>;
	close(${2:COMMAND});
snippet cmdfrom
	$command="${1:UNIX_COMMAND} |";
	open(${2:COMMAND},"$command") ||
	  die("$name: Cannot ${3:COMMAND_DISCRIPTION} with '$command': $!.");
	my @results = <${2:COMMAND}>;
	close(${2:COMMAND});
snippet dir
	$dir="${1:directory}";
	opendir(${2:DIR},$dir) || die "Can't open dir $dir: $!\n";
	@${3:files}=readdir($2);
	closedir($2);
	shift(@$3);shift(@$3); # for . and .. entries
	@$3=grep(! /^\./,@$3);
snippet fork
	#perl -le 'if ($pid=fork) { print "parent process, $$ the child is $pid"; } elsif (defined $pid) { print "child process, $$"; } else {print "wtf: $!"; }'
	FORK: {
		if ($pid = fork) {
			# parent here
			# child process pid is available in $pid
		} elsif (defined $pid) { # $pid is zero here if defined
			# child here
			# parent process pid is available with getppid
		} elsif ($! =~ /No more process/) {     
			# EAGAIN, supposedly recoverable fork error
			sleep 5;
			redo FORK;
		} else {
			# weird fork error
			die "$name: can't fork: $!\n";
		}
	}

## Conditionals - if; if..else; if..elsif..else; cmd if; unless; cmd unless; try/except
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unl
	unless (${1}) {
		${2:# body...}
	}
snippet unle
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional unless..elsif..else
snippet unlee
	if (${1}) {
		${2:# body...}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Unless conditional One-line
snippet xunl
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
snippet givenwhen
	given (${1:something}) {
		${2:statement} when ${3:condition}; # like/^abc/;
		${4:default-statement};
	}
snippet forwhen
	for (@${1:array}) {
		admin($_)   when [ qw/${2:wordlist}/ ];
		regular($_) when [ qw/${2:wordlist}/ ];
	}


## Looping structures - while, cmd while; until; cmd until; for; foreach; cmd for; for over array; cmd foreach
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
		next if (${3:next condition});
		last if (${4:last condition});
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# Until Loop
snippet unt
	until (${1}) {
		${2:# body...}
		next if (${3:next condition});
		last if (${4:last condition});
	}
# Until Loop One-line
snippet xunt
	${1:expression} until ${2:condition};${3}

## Looping structures - execute BLOCK once before conditional is checked
snippet dowh
	# simple do { .. } while (); do{} is not a loop; so loop control statements, next, last, redo do not work
	do {
		${2:# body...}
	} while ${3:while_condition};
snippet dowhn
	# do { .. } while (); allowing next loop control
	do {{
		next if ${1:next_condition};
		${2:# body...}
	}} while ${3:while_condition};
snippet dowhl
	# do { .. } while (); allowing last loop control
	LOOP: {
		do {
			last if  ${1:last_condition};
			${2:# body...}
		} while ${3:while_condition};
	}
snippet dowhile
	# double {{}} allows next
	# surrounding LOOP: BLOCK allows last and redo
	LOOP: {
		do {{
			redo if ${1:redo_condition};
			next if ${2:next_condition};
			last if ${3:last_condition};
			${4:# body...}
		}} while ${5:while_condition};
	}

	

# C-style For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:limit}; $$2${3:++}) {
		${4:# body...}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};${3}
# For array
snippet fora
	for (my $${1:var} =$[; $$1<=$#${2:array}; $$1++) {
		print FILE "$$2[$$1]\n";
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
snippet next
		next if (${3:next condition});
snippet last
		last if (${4:last condition});


# Functions; Classes
# Function
snippet sub
	sub ${1:function_name} {
		${2:# body ...}
	}
# Package/class
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
snippet AUTO
	sub AUTOLOAD {      
		my $self = shift;                             
		my $type = ref($self) || croak "AUTOLOAD called as $AUTOLOAD and '$self' is not an object";
	}

#	old switch statement
#	Perl itself has had such a switch statement for quite a while now:
#	1	use Switch;
#	2	 
#	3	switch ($grade) {
#	4	    case "A"   { say "Well done!" }
#	5	    case "B"   { say "Try harder!" }
#	6	    case "C"   { say "You need help!!!" }
#	7	    else         { print "You just making it up" }
#	8	}
#	However DONâ€™T USE IT!!! Its a source filter and is being deprecated.
#snippet sw
#	use Switch;
#	switch ($${1:val}) {
#		case ${2:regexp}	{ ${3:# commands} }
#		case 1		{ print "number 1" }
#		case "a"	{ print "string a" }
#		case [1..10,42]	{ print "number in list" }
#		case (@array)	{ print "number in list" }
#		case /\w+/	{ print "pattern" }
#		case qr/\w+/	{ print "pattern" }
#		case (%hash)	{ print "entry in hash" }
#		case (\%hash)	{ print "entry in hash" }
#		case (\&sub)	{ print "arg to subroutine" }
#		else		{ print "previous case not true" }
#	}  
# Instead use given/when which is the Perl 6 switch statement that was introduced at perl 5.10.

## Simple sorting routines
snippet sortnum
	sub numerically { $a <=> $b; }
snippet sortalpha
	sub alphabetically { $a cmp $b; }
snippet sortrnum
	sub numerically { $b <=> $a; }
snippet sortralpha
	sub alphabetically { $b cmp $a; }

## Useful date/time constructs
snippet localtime
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
snippet days
	my @days = qw(Sun Mon Tue Wed Thu Fri Sat);
snippet fulldays
	my @days_full = qw(Sunday Monday Tuesday Wednesday Thursday Friday Saturday);
snippet revdays
	# following line will load $days_byname hash key by abbreviations (and full names of days of the week if defined).
	my %days_byname;
	foreach my $day (0 .. $#days) { $days_byname{$days[$day]}=$day; $days_byname{$days_full[$day]}=$day if (@days_full); }
snippet months
	my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
snippet fullmonths
	my @months_full = qw(January February March April May June July August September October November December);
snippet revmonths
	# following line will load $months_byname hash key by abbreviations (and full month names if defined).
	my %months_byname;
	foreach my $month (0 .. $#months) { $months_byname{$months[$month]}=$month; $months_byname{$months_full[$month]}=$month if (@months_full); }
snippet ds
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $ds = sprintf("%02d%02d%02d",$mon+1,$mday,$year%100);
snippet day
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $day = sprintf("%s, %s %s, %d", $day[$wday], $mo[$mon], $mday, $year+1900);
snippet date
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my @months_full = qw(January February March April May June July August September October November December);
	my $date_full = sprintf("%s %d, %d", $mo_full[$mon], $mday, $year+1900);
snippet smhd
	$seconds	=time;
	$minutes	=int($seconds/60);	$seconds	%=60;
	$hours		=int($minutes/60);	$minutes	%=60;
	$days		=int($hours/24);	$hours		%=24;

## Commands for filesystem manipulation
snippet chmod
	chmod()
snippet chown
	chown()
snippet chgrp
	chgrp()
snippet sym
	symlink("${1:oldfile}","${2:newfile}");
snippet ln
	symlink("${1:oldfile}","${2:newfile}");
snippet link
	link("${1:oldfile}","${2:newfile}");
snippet mkdir
	mkdir("$${1:directory}",0755)
	  || warn("$name: could not make directory '$${1:directory}': $!\n");
snippet copy
	use File::Copy;
	copy("${1:oldfile}","${2:newfile}");
snippet move
	use File::Copy;
	move("${1:oldfile}","${2:newfile}");

## Random numbers
snippet randrand
	srand(time*$$); # set random number seed with the time * the process id
snippet rand
	$roll = int(rand(${${2:max}-$${1:min}+1))+$$1; # int between min and max inclusively; range is (max-min)+1
snippet randindex
	$${1:rand_array_index} = int(rand(@${2:array}))+$[;
snippet randarray
	$${1:rand_array_element} = $array[ int(rand(@${2:array})) + $[ ];

## Array uses
snippet pipe
	unshift(@history, $previous);
	shift(@history) if ($#history > $max_hist);
snippet fifo
	unshift(@history, $previous);
	shift(@history) if ($#history > $max_hist);
snippet stack
	unshift(@history, $previous);
	pop(@history) if ($#history > $max_hist);
snippet filo
	unshift(@history, $previous);
	pop(@history) if ($#history > $max_hist);

## Complicated perl commands, hard to remember
snippet split
	# will split string into the array on space, comma or (semi) colon
	@array=split(/[\s,;:]+/,$string);
snippet crypt
	${1:crypted_passwd} = crypt(${2:passwd},${3:SALT});
snippet splice
	splice(@${1:array},${2:position},${3:length),${4:replacelist});
snippet spliceexplain
	# splice @array, pos, [n], [list]
	#   removes and returns n elements from @array
	#   starting at pos, replacing them with list if given
	#   if n is not given will remove to end of @array
	#        push(@a,$x,$y)      splice(@a,$#a+1,0,$x,$y)
	#        pop(@a)             splice(@a,-1)
	#        shift(@a)           splice(@a,0,1)
	#        unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)
	#        $a[$x] = $y         splice(@a,$x,1,$y);
snippet substr
	substr(${1:EXPR},${2:OFFSET},${3:LENGTH},${4:REPLACEMENT});
snippet substrexplain
	# First character is at offset 0
	# OFFSET negative             == that far from the end of the string.
	# no LENGTH                   == everything to the end of the string.
	# negative LENGTH is negative == leaves that many characters off the end of the string.
snippet stat
	($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($_);
snippet passwd
	($name,$password,$lastchg,$min,$max,$warn,$inactive,$expire,$flag)=split(/:/,$_);
snippet select
	#  array composed of previous file handle and 1
snippet byteflip
	my ${1:varname} =~ tr/0123456789abcdef/084c2a6e195d3b7f/;
snippet rot13
	$password=~tr/a-mA-Mn-zN-Z/n-zN-Za-mA-M/;

## Useful subroutines data structures
snippet response
	sub response {
		my($prompt,$regexp,$exit_regexp)=(@_);
		print ($prompt)?$prompt:"yes|no ";
		$response=<STDIN>;
		$regexp||="^y";
		if ($exit_regexp and $response=~/$exit_regexp/i) {
			print "Quitting $name in response to user input '$response'\n";
			exit;
		}
		return ($response=~/$regexp/i);
	}
# Help
snippet help
	sub help {
		select(STDOUT); $|=1; $\=''; 
		print "@_[0]\n";
		print "${1:message}.\n";
		exit 1;
	}
snippet system
	sub system {
		my($command,$noecho,$do)=@_;
		print "$command\n" if (not $noecho);
		system($command)   if ($do);
	}
snippet wantarray
	if (wantarray) {
		return @mail;
	} else {
		return \@mail;
	}
snippet protect
	# protect the regexp characters ' ^ $ ? * + ( ) { } [ ] < > \ / . '
	$variable=~s/([\$\^*\[\]{}.<>()+?\/\\])/\\\1/g;
snippet newline
	select(STDOUT); $\="\n";
	select( ( select(FILE), $|=1 ) [$[] );
snippet chars
	$newline="\n"; 
	$tab="\t"; 
	$backspace="\010"; 
	$formfeed="\014"; 
	$escape="\033"; 
	$return="\015"; 
snippet onebits
	# the array onebits contains the number of one bits
	# in the binary representation of the index
	@onebitss=(
		0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
		3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
		3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
		4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
	);
